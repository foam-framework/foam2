p({
  "class":"foam.nanos.boot.NSpec",
  "name":"nSpecDAO",
  "serve":true,
  "authenticate": false,
  "serviceClass":"foam.dao.ProxyDAO",
  "client":
  """
    {
      "of":"foam.nanos.boot.NSpec",
      "cache":true,
      "ttlPurgeTime":0,
      "ttlSelectPurgeTime": 25000
     }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"AuthenticatedNSpecDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setAuthorizer(new foam.nanos.auth.StandardAuthorizer("service"))
      .setInnerDAO(x.get("nSpecDAO"))
      .setOf(foam.nanos.boot.NSpec.getOwnClassInfo())
      .build();
  """,
  "client":"""
    {
      "of":"foam.nanos.boot.NSpec",
      "cache":true,
      "ttlPurgeTime":0,
      "ttlSelectPurgeTime": 25000
    }
  """,
  documentation:"The authenticated version of nSpecDAO - for dig and docs."
})
p({"class":"foam.nanos.boot.NSpec", "name":"http",                             "lazy":false, "service":{"class":"foam.nanos.jetty.HttpServer","port":8080,"forwardedForProxyWhitelist":[],"welcomeFiles":["/src/foam/nanos/controller/index.html"],"servletMappings":[{"class":"foam.nanos.servlet.ServletMapping","className":"foam.nanos.http.NanoRouter","pathSpec":"/service/*"},{"class":"foam.nanos.servlet.ServletMapping","className":"org.eclipse.jetty.servlet.DefaultServlet","pathSpec":"/*","initParameters":{"dirAllowed":"true","redirectWelcome":"true"}}]}})
p({"class":"foam.nanos.boot.NSpec", "name":"httprouter",                         "serviceClass":"foam.nanos.http.NanoRouter"})

p({"class":"foam.nanos.boot.NSpec", "name":"websockets",                       "lazy":false, "serviceClass":"foam.nanos.ws.NanoWebSocketServer"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "auth",
  "serve": true,
  "authenticate": false,
  "boxClass": "foam.nanos.auth.AuthServiceSkeleton",
  "serviceScript": """
    auth = new foam.nanos.auth.UserAndGroupAuthService(x);
    auth = new foam.nanos.auth.PMAuthService.Builder(x)
      .setLabel("uncached")
      .setDelegate(auth)
      .build();
    auth = new foam.nanos.auth.CachingAuthService(auth);
    auth = new foam.nanos.auth.EnabledCheckAuthService.Builder(x)
      .setDelegate(auth)
      .build();
    auth = new foam.nanos.auth.PasswordExpiryAuthService.Builder(x)
      .setDelegate(auth)
      .build();
    auth = new foam.nanos.auth.twofactor.TwoFactorAuthService.Builder(x)
      .setDelegate(auth)
      .build();
    auth = new foam.nanos.auth.SystemAuthService.Builder(x)
      .setDelegate(auth)
      .build();
    return auth;
  """,
  "client": "{\"class\":\"foam.nanos.auth.CachedAuthServiceProxy\",\"delegate\":{\"class\":\"foam.nanos.auth.ClientLoginAuthService\"}}"
})


p({
  "class":"foam.nanos.boot.NSpec",
  "name":"columnConfigToPropertyConverter",
  "serve": true,
  "lazy":false,
  "serviceClass": "foam.nanos.column.ColumnConfigToPropertyConverter",
  "client": "{\"class\":\"foam.nanos.column.ColumnConfigToPropertyConverter\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "export",
  "serviceClass": "foam.nanos.export.ExportService"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "threadPool",
  "lazy": false,
  "serve": false,
  "serviceClass": "foam.nanos.pool.ThreadPoolAgency"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localUserDAO",
  "serviceScript": """
    return
      new foam.dao.PMDAO(x,
      new foam.dao.SequenceNumberDAO(1000,
      new foam.nanos.auth.PreventDuplicateEmailDAO.Builder(x).setDelegate(
        new foam.dao.java.JDAO(x, foam.nanos.auth.User.getOwnClassInfo(), "users")
      ).build()));
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"userDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setInnerDAO(x.get("localUserDAO"))
      .setOf(foam.nanos.auth.User.getOwnClassInfo())
      .setPermissioned(true)
      .setDecorator(
        new foam.dao.ValidatingDAO(x,
          new foam.nanos.auth.UserPasswordHashingDAO(x, new foam.dao.NullDAO.Builder(x).setOf(foam.nanos.auth.User.getOwnClassInfo()).build()),
          new foam.nanos.auth.validators.UserGroupAndSpidValidator()
        )
      )
      .build();
  """,
  "client":"""
    {
      "of":"foam.nanos.auth.User",
      "ttlSelectPurgeTime": 15000,
      "ttlPurgeTime": 0,
      "decorators": [{"class":"foam.nanos.fs.FileDAODecorator"}]
    }
  """
})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localGroupDAO",
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("groups")
      .setOf(foam.nanos.auth.Group.getOwnClassInfo())
      .setAuthorize(false)
      .build();
  """,
  "client":"{\"of\":\"foam.nanos.auth.Group\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"groupDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setInnerDAO(x.get("localGroupDAO"))
      .setOf(foam.nanos.auth.Group.getOwnClassInfo())
      .build();
  """,
  "client":"{\"of\":\"foam.nanos.auth.Group\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localCountryDAO",
  "description": "A DAO which contains information about countries.",
  "serve": false,
  "authenticate": false,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("countryDAO"))
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("countries")
      .setOf(foam.nanos.auth.Country.getOwnClassInfo())
      .setOrder(new foam.core.PropertyInfo[] {foam.nanos.auth.Country.NAME})
      .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "countryDAO",
  "serve": true,
  "authenticate": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.auth.Country.getOwnClassInfo())
      .setName("countries")
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("countryDAO"))
      .setInnerDAO(x.get("localCountryDAO"))
      .build();
  """,
  "client":
  """
    {
      "of": "foam.nanos.auth.Country",
      "cache": true,
      "ttlSelectPurgeTime": 0,
      "ttlPurgeTime": 0
    }
  """,
  "authNotes": "The \"authenticate\" flag is explicitly set to false because we want to be able to use the countryDAO to populate a dropdown in the sign up form. The DAO is decorated with an AuthenticatedDAO decorator with \"authenticateRead\" set to false so that anyone can read from countryDAO but only those with permission can write to or remove from it."
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"countryService",
  "serve":true,
  "serviceClass":"foam.nanos.auth.CountryService"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"languageDAO",
  "lazy":false,
  "serve":true,
  "serviceScript":`
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("languageDAO"))
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("languages")
      .setOf(foam.nanos.auth.Language.getOwnClassInfo())
      .build();
    `,
  "client":"{\"of\":\"foam.nanos.auth.Language\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "regionDAO",
  "description": "A DAO which contains information about regions in countries. A region is a province or a state, for example.",
  "serve": true,
  "authenticate": false,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("regionDAO"))
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName(\"regions\")
      .setOf(foam.nanos.auth.Region.getOwnClassInfo())
      .setOrder(new foam.core.PropertyInfo[] {foam.nanos.auth.Region.NAME})
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.auth.Region\"}",
  "documentation": "A DAO which contains information about regions in countries. A region is a province or a state, for example.",
  "authNotes": "The \"authenticate\" flag is explicitly set to false because we want to be able to use the regionDAO to populate a dropdown in the sign up form. The DAO is decorated with an AuthenticatedDAO decorator with \"authenticateRead\" set to false so that anyone can read from regionDAO but only those with permission can write to or remove from it."
})
p({"class":"foam.nanos.boot.NSpec", "name":"regionService",                      "serve":true, "serviceClass":"foam.nanos.auth.RegionService"})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"exportDriverRegistryDAO",
  "description": "DAO which provides a reference to data type drivers which are used to export data in various types",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setAuthorize(true)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("exportDriverRegistry"))
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("exportDriverRegistrys")
      .setDecorator(new foam.dao.EnabledAwareDAO.Builder(x).setOf(foam.nanos.export.ExportDriverRegistry.getOwnClassInfo()).build())
      .setOf(foam.nanos.export.ExportDriverRegistry.getOwnClassInfo())
      .build();
  """,
  "client":"{\"of\":\"foam.nanos.export.ExportDriverRegistry\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localPermissionDAO",
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setAuthorize(false)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("permissions")
      .setOf(foam.nanos.auth.Permission.getOwnClassInfo())
      .build();
    """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"permissionDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.auth.Permission.getOwnClassInfo())
      .setInnerDAO((foam.dao.DAO) x.get("localPermissionDAO"))
      .build();
  """,
  "client":"{\"of\":\"foam.nanos.auth.Permission\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name" :"menuDAO",
  "serve" :true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setName("menu")
      .setPm(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("menus")
      .setOf(foam.nanos.menu.Menu.getOwnClassInfo())
      .setOrder(new foam.core.PropertyInfo[] {foam.nanos.menu.Menu.ORDER, foam.nanos.menu.Menu.LABEL})
      .build();
  """,
  "client": """
    {
      "of": "foam.nanos.menu.Menu",
      "order": [
        {
          "class": "__Property__",
          "forClass_": "foam.nanos.menu.Menu",
          "name": "order"
        },
        {
          "class": "__Property__",
          "forClass_": "foam.nanos.menu.Menu",
          "name": "label"
        }
      ],
      "ttlSelectPurgeTime": 0,
      "ttlPurgeTime": 0,
      "cache": true
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "static",
  "authenticate": false,
  "serviceClass": "foam.nanos.http.FileWebAgent"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"blobStore",
  "serviceClass":"foam.blob.BlobStore"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "httpBlobService",
  "authenticate": false,
  "serviceScript": """
    httpBlobService = new foam.nanos.blob.HttpBlobService(x, x.get("blobStore"));
    return new foam.nanos.http.SessionWebAgent("service.run.httpBlobService", httpBlobService);
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "httpFileService",
  "authenticate": false,
  "serviceScript": """
    fileService = new foam.nanos.blob.FileService(x, x.get("blobStore"));
    return new foam.nanos.http.SessionWebAgent("service.run.httpFileService", fileService);
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "file",
  "authenticate": false,
  "serviceScript": """
    fileService = new foam.nanos.http.UnauthenticatedFileService(x, "file", x.get("blobStore"));
    return new foam.nanos.http.ProxyWebAgent(fileService);
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"blobService",
  "serve":true,
  "client": """
    {
      "class":"foam.blob.RestBlobService",
      "serviceName":"service/httpBlobService"
    }
  """
})

p({"class":"foam.nanos.boot.NSpec", "name":"resetPasswordToken",                 "serve":true,  "authenticate": false, "serviceClass":"foam.nanos.auth.resetPassword.ResetPasswordTokenService","boxClass":"foam.nanos.auth.token.TokenServiceSkeleton","client":"{\"class\":\"foam.nanos.auth.token.ClientTokenService\"}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "dig",
  "parameters": true,
  "serviceScript": "return new foam.nanos.dig.DigWebAgent()"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"digDAO",
  "serve":true,
  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setPm(true)
    .setGuid(true)
    .setOf(foam.nanos.dig.DIG.getOwnClassInfo())
    .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
    .setJournalName("digs")
    .setServiceProviderAware(true)
    .setServiceProviderAwarePropertyInfos(
      foam.util.Arrays.asMap(new Object[]
        {
          foam.nanos.dig.DIG.class.getName(),
          new foam.core.PropertyInfo[] { foam.nanos.dig.DIG.CREATED_BY }
        }
      )
    )
    .build();
  """,
  "client":"{\"of\":\"foam.nanos.dig.DIG\",\"decorators\": [{\"class\":\"foam.nanos.fs.FileDAODecorator\"},{\"class\":\"foam.nanos.fs.FileArrayDAODecorator\"}]}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"demoObjectDAO",                      "serve":true,  "serviceScript":"return new foam.dao.EasyDAO.Builder(x).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"demoObjects\").setGuid(true).setOf(foam.nanos.demo.DemoObject.getOwnClassInfo()).build();", "client":"{\"of\":\"foam.nanos.demo.DemoObject\", \"remoteListenerSupport\": false}"})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localServiceProviderDAO",
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setAuthorize(false)
      .setOf(foam.nanos.auth.ServiceProvider.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("capabilities")
      .setValidated(true)
      .setInnerDAO((foam.dao.DAO) x.get("localCapabilityDAO"))
      .setDecorator(
        new foam.dao.FilteredDAO.Builder(x)
          .setPredicate(foam.mlang.MLang.INSTANCE_OF(foam.nanos.auth.ServiceProvider.class))
          .setDelegate(new foam.dao.NullDAO.Builder(x).setOf(foam.nanos.auth.ServiceProvider.getOwnClassInfo()).build())
        .build())
      .build();
  """,
  "client":"{\"of\":\"foam.nanos.auth.ServiceProvider\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"serviceProviderDAO",
  "serve":true,
  "serviceScript":
  """
    return new foam.nanos.auth.AuthorizationDAO.Builder(x)
      .setDelegate((foam.dao.DAO) x.get("localServiceProviderDAO"))
      .setAuthorizer(new foam.nanos.auth.StandardAuthorizer("serviceprovider"))
      .build();
  """,
  "client":"{\"of\":\"foam.nanos.auth.ServiceProvider\"}"
})

p({"class":"foam.nanos.boot.NSpec", "name":"liveScriptBundler",                      "lazy":false,  "serve":false, "authenticate": false, "serviceClass":"foam.nanos.http.LiveScriptBundler"})
p({"class":"foam.nanos.boot.NSpec", "name":"emailToken",                         "serve":true,  "serviceClass":"foam.nanos.auth.email.EmailTokenService","boxClass":"foam.nanos.auth.token.TokenServiceSkeleton","client":"{\"class\":\"foam.nanos.auth.token.ClientTokenService\"}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "verifyEmail",
  "lazy": false,
  "authenticate": false,
  "serviceClass": "foam.nanos.auth.email.EmailVerificationWebAgent"
})

p({"class":"foam.nanos.boot.NSpec", "name":"twofactor",                          "serve":true,  "authenticate": false, "boxClass":"foam.nanos.auth.twofactor.OTPAuthServiceSkeleton", "serviceClass":"foam.nanos.auth.twofactor.GoogleTOTPAuthService", "client":"{\"class\":\"foam.nanos.auth.twofactor.ClientOTPAuthService\"}"})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"htmlDocDAO",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setOf(foam.nanos.auth.HtmlDoc.getOwnClassInfo())
      .setJournalName("htmlDoc")
      .build();
  """,
  "client":
  """
    {
      "of":"foam.nanos.auth.HtmlDoc"
    }
  """
})
p({"class":"foam.nanos.boot.NSpec", "name":"emailDocService",                  "lazy":false, "serve":true,  "boxClass":"foam.nanos.auth.email.EmailDocInterfaceSkeleton", "serviceClass":"foam.nanos.auth.email.EmailDocService","client":"{\"class\":\"foam.nanos.auth.email.ClientEmailDocService\", \"delegate\": { \"class\":\"foam.box.HTTPBox\", \"url\":\"service/emailDocService\" } }"})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"testRunnerConfig",
  "lazy":false,
  "service": {
    "class":"foam.nanos.script.TestRunnerConfig"
  }
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"appConfig",
  "lazy":false,
  "service": {
    "class":"foam.nanos.app.AppConfig"
  }
})

p({"class":"foam.nanos.boot.NSpec","name":"appConfigService",                   "serve":true, "authenticate": false, "boxClass":"foam.nanos.app.AppConfigServiceSkeleton", "service":{"class":"foam.nanos.app.ContextLookupAppConfigService"}, "client":"{\"class\":\"foam.nanos.app.ClientAppConfigService\",\"delegate\":{\"class\":\"foam.box.HTTPBox\",\"url\":\"service/appConfigService\"}}"})
p({"class":"foam.nanos.boot.NSpec", "name":"agentAuth",                        "lazy":false, "serve":true, "authenticate": false, "description":"Permits users to act as others if permitted. Places user as an agent of the system.", "boxClass":"foam.nanos.auth.AgentAuthServiceSkeleton", "serviceScript":"return new foam.nanos.auth.AgentUserAuthService(x);","client":"{\"class\":\"foam.nanos.auth.ClientAgentAuthService\"}"})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "agentJunctionDAO",
  "lazy": false,
  "serve": true,
  "description": "DAO responsible for storing agent authentication permission information.",
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName(\"agentJunctions\")
      .setOf(foam.nanos.auth.UserUserJunction.getOwnClassInfo())
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.auth.UserUserJunction\", \"remoteListenerSupport\": false}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localDocumentDAO",

  "serviceScript":
  """
  return new foam.dao.EasyDAO.Builder(x)
    .setOf(foam.flow.Document.getOwnClassInfo())
    .setInnerDAO(new foam.flow.DocumentationFolderDAO.Builder(x).build())
    .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "documentDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.flow.Document.getOwnClassInfo())
      .setPermissionPrefix("flow")
      .setInnerDAO(x.get("localDocumentDAO"))
      .build();
  """,
  "client": "{\"of\":\"foam.flow.Document\"\}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"supportEmailDAO",
  "lazy":true,
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setSeqProperty(true)
      .setOf(foam.support.model.SupportEmail.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("supportEmails")
      .build();
  """,
  "client":"{\"of\":\"foam.support.model.SupportEmail\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "sugar",
  "lazy": true,
  "serve": false,
  "parameters": true,
  "serviceScript": "return new foam.nanos.dig.SugarWebAgent()"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"sugarDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.dig.SUGAR.getOwnClassInfo())
      .setGuid(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("sugars")
      .setPm(true)
      .setServiceProviderAware(true)
      .setServiceProviderAwarePropertyInfos(
        foam.util.Arrays.asMap(new Object[]
          {
            foam.nanos.dig.SUGAR.class.getName(),
            new foam.core.PropertyInfo[] { foam.nanos.dig.SUGAR.CREATED_BY }
          }
        )
      )
      .build();
  """,
  "client":"{\"of\":\"foam.nanos.dig.SUGAR\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ruleDAO",
  "serve": true,
  "serviceScript": """
    dao = new foam.dao.EasyDAO.Builder(x)
      .setEnableInterfaceDecorators(false)
      .setServiceProviderAware(true)
      .setIndex(new foam.core.PropertyInfo[] {foam.nanos.ruler.Rule.DAO_KEY, foam.nanos.ruler.Rule.PRIORITY })
      .setOf(foam.nanos.ruler.Rule.getOwnClassInfo())
      .setInnerDAO(x.get("localRuleDAO"))
      .setRuler(false)
      .build();

    dao.addPropertyIndex(new foam.core.PropertyInfo[] { foam.nanos.ruler.Rule.NAME });
    dao = new foam.dao.ValidatingDAO(x, dao);

    return dao;
  """,
  "client": """
    {
      "of": "foam.nanos.ruler.Rule"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localRuleDAO",
  "serviceScript":
  """
    dao = new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setGuid(true)
      .setOf(foam.nanos.ruler.Rule.getOwnClassInfo())
      .setGuid(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("rules")
      .setContextualize(true)
      .setValidated(true)
      .setRuler(true)
      .setRulerDaoKey("localRuleDAO")
      .setAuthorize(false)
      .build();

    dao.addPropertyIndex(new foam.core.PropertyInfo[] { foam.nanos.ruler.Rule.NAME });
    dao.addPropertyIndex(new foam.core.PropertyInfo[] { foam.nanos.ruler.Rule.DAO_KEY });
    dao.addPropertyIndex(new foam.core.PropertyInfo[] { foam.nanos.ruler.Rule.ENABLED });

    return dao;
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "ruleGroupDAO",
  "serve": true,
  "serviceScript": """
    ed = new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.ruler.RuleGroup.getOwnClassInfo())
      .setGuid(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("ruleGroups")
      .setRuler(false)
      .setPm(true)
      .build();
    return new foam.dao.ValidatingDAO(x, ed);
  """,
  "client": """
    {
      "of": "foam.nanos.ruler.RuleGroup"
    }
  """
})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"ruleHistoryDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.ruler.RuleHistory.getOwnClassInfo())
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("ruleHistory")
      .setRuler(false)
      .setPm(true)
      .build();
    """,
    "client":"{\"of\":\"foam.nanos.ruler.RuleHistory\"}"
})
//p({"class":"foam.nanos.boot.NSpec", "name":"ruleHistoryDAO",                     "serve":true,  "serviceScript":"dao = new foam.dao.EasyDAO.Builder(x).setPm(true).setSeqNo(true).setOf(foam.nanos.ruler.RuleHistory.getOwnClassInfo()).setJournalType(foam.dao.JournalType.SINGLE_JOURNAL).setJournalName(\"ruleHistory\").build(); ca = new foam.nanos.auth.CreatedAwareDAO.Builder(x).setDelegate(dao).build(); lma = new foam.nanos.auth.LastModifiedAwareDAO.Builder(x).setDelegate(ca).build(); return lma;", "client":"{\"of\":\"foam.nanos.ruler.RuleHistory\"}"})
p({"class":"foam.nanos.boot.NSpec", "name":"serializationTestEchoService", "boxClass": "foam.nanos.test.EchoServiceSkeleton",  "serve":true, "serviceClass":"foam.nanos.test.SerializationTestEchoService", "client":"{\"class\":\"foam.nanos.test.ClientEchoService\",\"delegate\":{\"class\":\"foam.box.SessionClientBox\",\"delegate\":{\"class\":\"foam.box.HTTPBox\",\"method\":\"POST\",\"url\":\"service/serializationTestEchoService\"}}}"})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localGroupPermissionJunctionDAO",
  "description":"The junction DAO for the many-to-many relationship between groups and permissions",
  "serviceScript":"""
    dao = new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.auth.GroupPermissionJunction.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("groupPermissionJunctions")
      .setPm(true)
      .build();

    dao.addPropertyIndex(new foam.core.PropertyInfo[] { foam.nanos.auth.GroupPermissionJunction.SOURCE_ID });
    return dao;
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"groupPermissionJunctionDAO",
  "description":"The junction DAO for the many-to-many relationship between groups and permissions. NOTE: authorization is setup on local dao.",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.auth.GroupPermissionJunction.getOwnClassInfo())
      .setAuthorize(false)
      .setInnerDAO((foam.dao.DAO) x.get("localGroupPermissionJunctionDAO"))
    .build();""",
  "client":"{\"of\": \"foam.nanos.auth.GroupPermissionJunction\"}"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"addressParser",
  "lazy":false,
  "serve":false,
  "serviceScript": """
    return new foam.nanos.geocode.GoogleMapsAddressParser.Builder(x).build();
  """,
})
p({
  "class":"foam.nanos.boot.NSpec",
  "name":"googleMapsCredentials",
  "lazy":false,
  "serve":false,
  "service":{
    "class": "foam.nanos.geocode.GoogleMapsCredentials"
  }
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localCurrencyDAO",
  "serve": false,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.core.Currency.getOwnClassInfo())
      .setName("currency")
      .setPm(true)
      .setPipelinePm(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("currencies")
      .setIndex(new foam.core.PropertyInfo[] {foam.core.Currency.COUNTRY})
      .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "currencyDAO",
  "serve": true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.core.Currency.getOwnClassInfo())
      .setName("currency")
      .setInnerDAO(x.get("localCurrencyDAO"))
      .build();
  """,
  "client":
  """
    {
      "of": "foam.core.Currency",
      "cache": true,
      "ttlSelectPurgeTime": 0,
      "ttlPurgeTime": 0
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"approvableDAO",
  "serve":true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setGuid(true)
      .setAuthorize(false)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("approvables")
      .setOf(foam.nanos.approval.Approvable.getOwnClassInfo())
      .build();
  """,
  "client": """
    {
      "of": "foam.nanos.approval.Approvable"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "approvalRequestDAO",
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.approval.ApprovalRequest.getOwnClassInfo())
      .setAuthorizer(new foam.nanos.approval.AuthenticatedApprovalDAOAuthorizer())
      .setPm(true)
      .setPipelinePm(true)
      .setSeqNo(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("approvalRequests")
      .setValidated(true)
      .setRulerDaoKey("approvalRequestDAO")
      .setDecorator(
        new foam.nanos.approval.SendGroupRequestApprovalDAO(x,
          new foam.nanos.approval.ApprovalDAO(x, new foam.dao.NullDAO.Builder(x).setOf(foam.nanos.approval.ApprovalRequest.getOwnClassInfo()).build()
          )
        )
      )
      .setIndex(new foam.core.PropertyInfo[] {foam.nanos.approval.ApprovalRequest.CREATED})
      .setFixedSize(new foam.dao.FixedSizeDAO.Builder(x)
        .setPredicate(foam.mlang.MLang.NEQ(foam.nanos.approval.ApprovalRequest.STATUS, foam.nanos.approval.ApprovalStatus.REQUESTED))
        .setComparator(foam.mlang.MLang.DESC(foam.nanos.approval.ApprovalRequest.CREATED))
        .setSize(10000)
        .build())
      .build()
      .orderBy(foam.mlang.MLang.DESC(foam.nanos.approval.ApprovalRequest.CREATED));
  """,
  "client": "{\"of\":\"foam.nanos.approval.ApprovalRequest\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "userQueryService",
  "serve": true,
  "serviceClass": "foam.nanos.auth.SimpleUserQueryService",
  "boxClass": "foam.nanos.auth.UserQueryServiceSkeleton",
  "client":
  """
    {
      "class":"foam.nanos.auth.ClientUserQueryService",
      "delegate": {
        "class":"foam.box.SessionClientBox",
        "delegate": {
          "class":"foam.box.HTTPBox",
          "url":
          "service/userQueryService"
        }
      }
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"googleDriveService",
  "service": {
    "class":"foam.nanos.google.api.drive.GoogleDriveService"
  },
  "documentation": "googleDriveService is used for making calls to Google Drive API"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"googleApiAuthService",
  "service": {
    "class":"foam.nanos.google.api.auth.GoogleApiAuthService"
  },
  "documentation": "googleApiAuthService configures authoriziation (sets scope of permissions which are needed to be granted by user, sets port which will be listening to response and sets folder in which tokens will be stored) and authorize Google API calls"
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"googleApiCredentialsDAO",
  "serve":true,
  "serviceScript":
  """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.google.api.auth.GoogleApiCredentials.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("googleCredentials")
      .build();
  """,
  "client":
  """
    {
      "of":"foam.nanos.google.api.auth.GoogleApiCredentials"
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "googleSheetsDataExport",
  "serve": true,
  "authenticate": true,
  "boxClass": "foam.nanos.export.GoogleSheetsExportSkeleton",
  "serviceClass": "foam.nanos.google.api.sheets.GoogleSheetsApiService",
  "client":"""
    {
      "class": "foam.nanos.export.ClientGoogleSheetsExportService",
      "delegate":
        {
          "class": "foam.box.HTTPBox",
          "url": "service/googleSheetsDataExport"
        }
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "googleSheetsDataImport",
  "serve": true,
  "authenticate": true,
  "boxClass": "foam.nanos.google.api.sheets.GoogleSheetsDataImportServiceSkeleton",
  "serviceClass": "foam.nanos.google.api.sheets.GoogleSheetsDataImportServiceImpl",
  "client":"""
    {
      "class": "foam.nanos.google.api.sheets.ClientGoogleSheetsDataImportService",
      "delegate":
        {
          "class": "foam.box.HTTPBox",
          "url": "service/googleSheetsDataImport"
        }
    }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "googleSheetsTransactionsDataImport",
  "serve": true,
  "authenticate": true,
  "boxClass": "foam.nanos.google.api.sheets.GoogleSheetsDataImportServiceSkeleton",
  "serviceClass": "foam.nanos.google.api.sheets.GoogleSheetsTransactionsDataImportServiceImpl",
  "client":"""
    {
      "class": "foam.nanos.google.api.sheets.ClientGoogleSheetsDataImportService",
      "delegate":
        {
          "class": "foam.box.HTTPBox",
          "url": "service/googleSheetsTransactionsDataImport"
        }
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"reportTemplateDAO",
  "lazy":false,
  "serve":true,
  "authenticate": true,
  "serviceScript":"""
    import foam.dao.DAO;
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.export.report.Template.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("reportTemplates")
      .setAuthorize(true)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("reportTemplateDAO"))
      .build();
  """,
  "client":
  """
    {
      \"of\":\"foam.nanos.export.report.Template\"
    }
  """
})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "userPropertyAvailabilityService",
  "serve": true,
  "authenticate": false,
  "boxClass":"foam.nanos.auth.UserPropertyAvailabilityServiceInterfaceSkeleton",
  "serviceClass": "foam.nanos.auth.UserPropertyAvailabilityService",
  "client":
    """
      {
        "class":"foam.nanos.auth.ClientUserPropertyAvailabilityService",
        "delegate": {
          "class":"foam.box.SessionClientBox",
          "delegate": {
            "class":"foam.box.HTTPBox",
            "url":
            "service/userPropertyAvailabilityService"
          }
        }
      }
    """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "timezoneDAO",
  "description": "A DAO which contains information about timezones in countries.",
  "serve": true,
  "serviceScript": """
    dao = new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setAuthorizer(new foam.nanos.auth.GlobalReadAuthorizer("timezoneDAO"))
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("timezones")
      .setOf(foam.nanos.auth.TimeZone.getOwnClassInfo())
      .build();
    dao.addPropertyIndex(new foam.core.PropertyInfo[] { foam.nanos.auth.TimeZone.DISPLAY_NAME });
    dao.addPropertyIndex(new foam.core.PropertyInfo[] { foam.nanos.auth.TimeZone.COUNTRY_ID });

    return dao;
  """,
  "client": "{\"of\":\"foam.nanos.auth.TimeZone\"}"
})
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "templateEngine",
  "serve": false,
  "serviceClass": "foam.nanos.notification.email.EmailTemplateEngine"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "counterDAO",
  "description": "A reporting count DAO being updated on other dao update",
  "serve": true,
  "serviceScript": """
    dao = new foam.dao.EasyDAO.Builder(x)
      .setPm(true)
      .setSeqNo(true)
      .setCreatedAware(true)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("counters")
      .setOf(foam.counter.Counter.getOwnClassInfo())
      .build();

    return dao;
  """,
  "client": "{\"of\":\"foam.counter.Counter\"}"
})
