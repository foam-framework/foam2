p({"class":"foam.nanos.test.Test","id":"Password hashing","description":"Test UserPasswordHashingDAO","server":true,"code":"import foam.nanos.auth.User;\nimport foam.nanos.auth.UserPasswordHashingDAO;\nimport foam.dao.MDAO;\nimport foam.util.SafetyUtil;\nimport foam.core.X;\nimport foam.util.Password;\n\nX context = foam.core.EmptyX.instance();\n\nuserDAO = new UserPasswordHashingDAO(context, new MDAO(User.getOwnClassInfo()));\n\nFIRST_PASSWORD = \"53CUR3P455W0RD\";\n\nuser = new User();\nuser.setDesiredPassword(FIRST_PASSWORD);\nresult = userDAO.put(user);\n\ntest(! result.getPassword().equals(FIRST_PASSWORD), \"Password returned from put should not match original password.\");\ntest(Password.verify(FIRST_PASSWORD, result.getPassword()), \"Password returned from put should be hash of original password.\");\ntest(SafetyUtil.isEmpty(result.getDesiredPassword()), \"Desired password should not be returned from first put.\");\ntest(SafetyUtil.isEmpty(result.getPreviousPassword()), \"Previous password should not be returned from first put.\");\ntest(result.getPasswordLastModified() != null, \"passwordLastModified property should be set.\");\n\nprint(\"\");\nprint(\"Second put: changing password.\");\nSECOND_PASSWORD = \"5UP3R53CUR3P455W0RD\";\nuser.setDesiredPassword(SECOND_PASSWORD);\nresult2 = userDAO.put(user);\n\ntest(! result2.getPassword().equals(SECOND_PASSWORD), \"Password returned from put should not match new password.\");\ntest(Password.verify(SECOND_PASSWORD, result2.getPassword()), \"Password returned from put should be hash of new password.\");\ntest(SafetyUtil.isEmpty(result2.getDesiredPassword()), \"Desired password should not be returned from second put.\");\ntest(! SafetyUtil.isEmpty(result2.getPreviousPassword()), \"Previous password should be returned from second put.\");\ntest(Password.verify(FIRST_PASSWORD, result2.getPreviousPassword()), \"Previous password returned from put should be hash of original password.\");\ntest(result2.getPasswordLastModified().compareTo(result.getPasswordLastModified()) > 0, \"passwordLastModified property should be updated.\");","notes":""})
p({"class":"foam.nanos.test.Test","id":"MDAO test","description":"MDAO test","server":true,"scheduled":false,"code":"mdao = new foam.dao.MDAO(foam.nanos.auth.Country.getOwnClassInfo());\ncountry = new foam.nanos.auth.Country();\ncountry.setCode(\"CN\");\ncountry.setName(\"CHINA\");\nmdao.put(country);\ncountry = country.fclone();\ncountry.setCode(\"CA\");\ncountry.setName(\"CANADA\");\nmdao.put(country);\ncountry = country.fclone();\ncountry.setCode(\"USA\");\ncountry.setName(\"United States of America\");\nmdao.put(country);\nresult = mdao.find(\"CA\");\ntest(result.getName().equals(\"CANADA\"),\"test if country name of CA is CANADA?\");\nresult = mdao.find(\"CAD\");\ntest(result==null,\"test if country name of CAD not found?\");","output":"SUCCESS: test if country name of CA is CANADA?\nSUCCESS: test if country name of CAD not found?\n","notes":""})
p({"class":"foam.nanos.test.Test","id":"MapDAOTest","description":"MapDAOTest","server":true,"scheduled":false,"code":"mdao = new foam.dao.MapDAO(foam.nanos.auth.Country.getOwnClassInfo());\ncountry  = new foam.nanos.auth.Country();\ncountry.setCode(\"CN\");\ncountry.setName(\"CHINA\");\nmdao.put(country);\ncountry=country.fclone();\ncountry.setCode(\"CN2\");\ncountry.setName(\"CHINA2\");\nmdao.put(country);\nresult = mdao.find(\"CN\");\ntest(result.getName().equals(\"CHINA\"),\"test if country name of CN is CHINA?\");\nresult = mdao.find(\"CAD\");\ntest(result==null,\"test if country name of CAD not found?\");\n\n","notes":""})
p({"class":"foam.nanos.test.Test","id":"Relationship Test","description":"Tests behaviour of relationships from Java","lastRun":"2018-02-13T17:21:26.173Z","lastDuration":28,"code":"//set up\nfoam.core.X x = foam.core.EmptyX.instance();\n\nx = x.put(\"courseDAO\", new foam.dao.EasyDAO.Builder(x).\nsetContextualize(true).\nsetAuthenticate(false).\nsetOf(foam.nanos.demo.relationship.Course.getOwnClassInfo()).\nbuild());\n\nx = x.put(\"professorDAO\", new foam.dao.EasyDAO.Builder(x).\nsetGuid(true).\nsetContextualize(true).\nsetAuthenticate(false).\nsetOf(foam.nanos.demo.relationship.Professor.getOwnClassInfo()).\nbuild());\n\nx = x.put(\"studentDAO\", new foam.dao.EasyDAO.Builder(x).\nsetContextualize(true).\nsetAuthenticate(false).\nsetSeqNo(true).\nsetOf(foam.nanos.demo.relationship.Student.getOwnClassInfo()).\nbuild());\n\nx = x.put(\"studentCourseJunctionDAO\", new foam.dao.EasyDAO.Builder(x).\nsetContextualize(true).\nsetAuthenticate(false).\nsetOf(foam.nanos.demo.relationship.StudentCourseJunction.getOwnClassInfo()).\nbuild());\n\nfoam.dao.DAO studentDAO               = ((foam.dao.DAO)x.get(\"studentDAO\")).inX(x);\nfoam.dao.DAO courseDAO                = ((foam.dao.DAO)x.get(\"courseDAO\")).inX(x);\nfoam.dao.DAO professorDAO             = ((foam.dao.DAO)x.get(\"professorDAO\")).inX(x);\nfoam.dao.DAO studentCourseJunctionDAO = ((foam.dao.DAO)x.get(\"studentCourseJunctionDAO\")).inX(x);\n\nstudentDAO.put(new foam.nanos.demo.relationship.Student.Builder(x).\nsetName(\"Adam\").\nbuild());\n\nstudentDAO.put(new foam.nanos.demo.relationship.Student.Builder(x).\nsetName(\"Mike\").\nbuild());\n\ncourseDAO.put(new foam.nanos.demo.relationship.Course.Builder(x).\nsetCode(\"CS 101\").\nsetTitle(\"Intro to computer science\").\nbuild());\n\ncourseDAO.put(new foam.nanos.demo.relationship.Course.Builder(x).\nsetCode(\"CS 201\").\nsetTitle(\"Intro to computer science II\").\nbuild());\n\nfoam.nanos.demo.relationship.Professor donald =\n(foam.nanos.demo.relationship.Professor) professorDAO.put(new foam.nanos.demo.relationship.Professor.Builder(x).\nsetName(\"Donald Knuth\").\nbuild());\n\nfoam.nanos.demo.relationship.Professor alan =\n(foam.nanos.demo.relationship.Professor)professorDAO.put(new foam.nanos.demo.relationship.Professor.Builder(x).\nsetName(\"Alan Kay\").\nbuild());\n\n\n\nfoam.nanos.demo.relationship.Student adam = (foam.nanos.demo.relationship.Student)studentDAO.find(1L);\nfoam.nanos.demo.relationship.Student mike = (foam.nanos.demo.relationship.Student)studentDAO.find(2L);\n\nfoam.nanos.demo.relationship.Course cs101 = (foam.nanos.demo.relationship.Course)courseDAO.find(\"CS 101\");\nfoam.nanos.demo.relationship.Course cs201 = (foam.nanos.demo.relationship.Course)courseDAO.find(\"CS 201\");\n\n\n// Assign professors\n// TODO: should we support .add()/.remove() for 1:* relationships as\n// well?\ndonald.getCourses(x).put(cs101);\nalan.getCourses(x).put(cs201);\n\n// Enroll students\ncs101.getStudents(x).add(adam);\nmike.getCourses(x).add(cs201);\nmike.getCourses(x).add(cs101);\n\nfoam.nanos.demo.relationship.Course course = cs101;\n\ntest(course.findProfessor(x).getName() == \"Donald Knuth\", \"Getting Target Object from Source Object (1:*)\");\n\ndonaldsCourses = donald.getCourses(x).select(new foam.dao.ArraySink()).getArray();\n\ntest(donaldsCourses.get(0).getCode() == \"CS 101\", \"Getting Source Object from target Object (1:*)\");\n\nstudents = course.getStudents(x).getDAO().select(new foam.dao.ArraySink()).getArray();\n\ntest(students.size() == 2, \"(length check) Getting Source object from target Object (*:*)\");\n\ntest(students.get(0).getName() == \"Adam\", \"(Object check) Getting Source object from target Object (*:*)\");\n\nadamsCourses = adam.getCourses(x).getDAO().select(new foam.dao.ArraySink()).getArray();\n\ntest(adamsCourses.size() == 1, \"(length check) Getting Target object from Source Object (*:*)\");\n\ntest(adamsCourses.get(0).getCode() == \"CS 101\", \"(Object check) Getting Target object from Source Object (*:*)\");\n\nmikesCourses = mike.getCourses(x).getDAO().select(new foam.dao.ArraySink()).getArray();\n\ntest(mikesCourses.size() == 2, \"(length check) multiple sources *:*\");\n\ncontainsCourses = true;\n\nArrayList courseCodes = new ArrayList();\ncourseCodes.add(\"CS 101\");\ncourseCodes.add(\"CS 201\");\n\nfor(course : mikesCourses) {\ncode = course.getCode();\ncontainsCourses = containsCourses && courseCodes.contains(code);\n}\n\ntest(containsCourses, \"(Object check) multiple sources *:*\");\n\ncourse = cs201;\n\nprint(\"\");\nprint(\"**** \" + course.getCode() + \" ****\");\nprint(\"Instructor: \" + ((foam.nanos.demo.relationship.Professor)((foam.dao.DAO)x.get(\"professorDAO\")).find(course.getProfessor())).getName());\nprint(\"\");\nprint(\"*** Students ***\");\nprint(\"\");\n\nsink = (foam.dao.ArraySink)course.getStudents(x).getDAO().select(null);\ni = sink.getArray().iterator();\n\nwhile ( i.hasNext() ) {\nfoam.nanos.demo.relationship.Student student = (foam.nanos.demo.relationship.Student)i.next();\nprint(student.getName());\n}\n\nfoam.nanos.demo.relationship.Professor professor = alan;\n\nprint(\"\");\nprint(\"**** \" + professor.getName() + \" ****\");\nprint(\"*** Courses ***\");\nprint(\"\");\n\nsink = (foam.dao.ArraySink)professor.getCourses(x).select(null);\ni = sink.getArray().iterator();\n\nwhile ( i.hasNext() ) {\nfoam.nanos.demo.relationship.Course course = (foam.nanos.demo.relationship.Course)i.next();\nprint(course.getCode());\n}\n\n\nprofessor = donald;\n\nprint(\"\");\nprint(\"**** \" + professor.getName() + \" ****\");\nprint(\"*** Courses ***\");\nprint(\"\");\n\nsink = (foam.dao.ArraySink)professor.getCourses(x).select(null);\ni = sink.getArray().iterator();\n\nwhile ( i.hasNext() ) {\nfoam.nanos.demo.relationship.Course course = (foam.nanos.demo.relationship.Course)i.next();\nprint(course.getCode());\n}\n"})
p({"class":"foam.nanos.test.Test","id":"Freeze test","code":"foam.nanos.demo.relationship.Professor prof = new foam.nanos.demo.relationship.Professor();\n\nprof.setName(\"Adam\");\n\nprint(\"Name is: \" + prof.getName());\nprint(\"Freezing object.\");\n\nprof.freeze();\n\nboolean exceptionThrown = false;\n\ntry {\n  prof.setName(\"Bob\");\n} catch ( UnsupportedOperationException ex ) {\n  exceptionThrown = true;\n}\n\ntest(exceptionThrown, \"Prevented setting property of frozen object.\");\ntest(prof.getName().equals(\"Adam\"), \"Name is still Adam\");\n\nfoam.nanos.demo.relationship.Professor prof2 = prof.fclone();\n\nprint(\"Unfreezing object via cloning\");\n\nprint(\"Name was: \" + prof2.getName());\n\nprof2.setName(\"Bob\");\n\nprint(\"Name is now: \" + prof2.getName());\n\nfoam.core.X x = foam.core.EmptyX.instance();\n\nx = x.put(\"professorDAO\", new foam.dao.EasyDAO.Builder(x).\nsetGuid(true).\nsetContextualize(true).\nsetAuthenticate(false).\nsetOf(foam.nanos.demo.relationship.Professor.getOwnClassInfo()).\nbuild());\n\nfoam.dao.DAO professorDAO = ((foam.dao.DAO)x.get(\"professorDAO\"));\n\nprofessorDAO.put(prof2);\n\nfoam.dao.ArraySink sink = (foam.dao.ArraySink)professorDAO.select();\n\nprof = (foam.nanos.demo.relationship.Professor)sink.getArray().get(0);\n\nprint(\"Testing if object from DAO is frozen.\");\n\nString name1 = prof.getName();\n\nprint(\"Name is: \" + prof.getName());\n\nexceptionThrown = false;\n\ntry {\n  prof.setName(\"John\");\n} catch ( UnsupportedOperationException ex ) {\n  exceptionThrown = true;\n}\n\ntest(exceptionThrown, \"Prevented setting property of frozen object.\");\ntest(prof.getName().equals(name1), \"Name is still \" + name1);\n"})
p({"class":"foam.nanos.test.Test","id":"AuthenticatedJunctionDAOTest","description":"Tests agent auth service and associated agentJunctionDAO","code":"import foam.util.Auth;\nimport foam.nanos.auth.UserUserJunction;\nimport foam.dao.ArraySink;\nimport foam.nanos.auth.AuthorizationException;\n\nx = x.put(\"agentJunctionDAO\", new foam.nanos.auth.AuthenticatedAgentJunctionDAO(\nx, new foam.dao.EasyDAO.Builder(x)\n.setContextualize(true)\n.setAuthenticate(false)\n.setOf(foam.nanos.auth.UserUserJunction.getOwnClassInfo())\n.build()));\n\nx = x.put(\"groupDAO\", new foam.dao.EasyDAO.Builder(x)\n.setContextualize(true)\n.setAuthenticate(false)\n.setOf(foam.nanos.auth.Group.getOwnClassInfo())\n.build());\n\nx = x.put(\"localUserDAO\", new foam.dao.EasyDAO.Builder(x)\n.setContextualize(true)\n.setAuthenticate(false)\n.setOf(foam.nanos.auth.User.getOwnClassInfo())\n.build());\n\ngroupDAO = x.get(\"groupDAO\");\nagentJunctionDAO = x.get(\"agentJunctionDAO\");\nuserDAO = x.get(\"localUserDAO\");\nauth = x.get(\"auth\");\n\n// Test Group \ngroup = new foam.nanos.auth.Group();\ngroup.setId(\"testGroup\");\ngroup.setEnabled(true);\ngroup.setParent(null);\ngroupDAO.put(group);\n\n// System Group\nsystemGroup = new foam.nanos.auth.Group();\nsystemGroup.setId(\"system\");\nsystemGroup.setEnabled(true);\nsystemGroup.setParent(null);\npermission = new foam.nanos.auth.Permission();\npermission.setId(\"*\");\nfoam.nanos.auth.Permission[] permissions = new foam.nanos.auth.Permission[1];\npermissions[0] = permission;\nsystemGroup.setPermissions(permissions);\ngroupDAO.put(systemGroup);\n\n// Regular User\nuser = new foam.nanos.auth.User();\nuser.setId(2);\nuser.setGroup(\"testGroup\");\nuser.setEmail(\"test@test.com\");\n\nentity = x.get(\"user\");\nuserDAO.put(entity);\nuser = userDAO.put(user);\n\n\n// Test put_ on agentJunctionDAO as globally permitted entity\nentity.getAgents(x).add(user);\nentityJunctions = agentJunctionDAO.select_(x, new foam.dao.ArraySink(), 0, 100, null, null).getArray();\n\ntest(entityJunctions.size() == 1, \"Globally permitted entity successfully added agent.\");\n\nentity.getEntities(x).add(user);\nentityJunctions = agentJunctionDAO.select_(x, new foam.dao.ArraySink(), 0, 100, null, null).getArray();\n\ntest(entityJunctions.size() == 2, \"Globally permitted entity successfully added entity.\");\n\n//Clean DAO\nagentJunctionDAO.removeAll();\n\n// Set regular user into context.\nx = Auth.sudo(x, user);\n\n// Test put_ on agentJunctionDAO as regular user\nuser.getAgents(x).add(entity);\nuserJunctions = agentJunctionDAO.select_(x, new foam.dao.ArraySink(), 0, 100, null, null).getArray();\ntest(userJunctions.size() == 1, \"Regular user successfully added entity as agent.\");\n\ntry {\nuser.getEntities(x).add(entity);\n} catch(AuthorizationException e) {}\nuserJunctions = agentJunctionDAO.select_(x, new foam.dao.ArraySink(), 0, 100, null, null).getArray();\n\ntest(userJunctions.size() == 1, \"Regular user could not add entity as an entity.\");\n\n// Test find_ on agentJunctionDAO as Globally permitted entity.\n// Set system as user.\nx = Auth.sudo(x, entity);\n\njunctionObj = agentJunctionDAO.find_(x, userJunctions.get(0));\ntest( junctionObj != null, \"Globally permitted user was able to find junction object.\");\n\n// Test find_ on agentJunctionDAO as Regular user.\nx = Auth.sudo(x, user);\n\njunctionObj = agentJunctionDAO.find_(x, userJunctions.get(0));\n\ntest( junctionObj != null, \"Regular user was able to find related junction object.\");\n\n// Set system as user and put unrelated junction object to regular user to agentJunctionDAO.\nx = Auth.sudo(x, entity);\n\nentity.getEntities(x).add(entity);\njunctionObj = agentJunctionDAO.select(new foam.dao.ArraySink()).getArray();\nx = Auth.sudo(x, user);\nunrelatedJunction = agentJunctionDAO.find_(x, junctionObj.get(0));\n\ntest( unrelatedJunction == null, \"Regular user was unable to find unrelated junction object.\");\n\n// Regular user selected all related junction objects.\nuserJunctions = agentJunctionDAO.select_(x, new foam.dao.ArraySink(), 0, 100, null, null).getArray();\ntest( userJunctions.size() == 1, \"Regular user successfully selected all related junction objects\");\n\n// Globally permitted user was able to remove unrelated junction object.\nuser.getAgents(x).add(user);\nx = Auth.sudo(x, entity);\nentityJunctions = agentJunctionDAO.select_(x, new foam.dao.ArraySink(), 0, 100, null, null).getArray();\nunrelatedJunction = entityJunctions.get(1);\nagentJunctionDAO.remove_(x, unrelatedJunction);\njunctionObj = agentJunctionDAO.find_(x, unrelatedJunction);\n\ntest( junctionObj == null, \"Globally permitted user was able to remove unrelated junction object.\");\n\n// Regular user was able to remove related junction object.\nx = Auth.sudo(x, user);\nrelatedJunction = entityJunctions.get(1);\nagentJunctionDAO.remove_(x, relatedJunction);\njunctionObj = agentJunctionDAO.find_(x, relatedJunction);\n\ntest( junctionObj == null, \"Regular user removed related junction object successfully.\");\n\n// Regular user was unable to remove unrelated junction object.\nunrelatedJunctionObj = entityJunctions.get(0);\ntry {\nagentJunctionDAO.remove_(x, unrelatedJunctionObj);\n} catch(AuthorizationException e){}\n\nx = Auth.sudo(x, entity);\njunctionObj = agentJunctionDAO.find_(x, unrelatedJunctionObj);\n\ntest( junctionObj != null, \"Regular user was unable to remove unrelated junction object.\");\n\n// Globally permitted user removed all junction objects.\nagentJunctionDAO.removeAll_(x, 0, 100, null, null);\nentityJunctions = agentJunctionDAO.select_(x, new foam.dao.ArraySink(), 0, 100, null, null).getArray();\n\ntest( entityJunctions.size() == 0, \"Globally permitted user removed all junction objects.\");\n\n// Regular user removed all related junctions objects.\nentity.getAgents(x).add(entity);\nentity.getAgents(x).add(user);\n\nx = Auth.sudo(x, user);\nagentJunctionDAO.removeAll_(x, 0, 100, null, null);\nentityJunctions = agentJunctionDAO.select_(x, new foam.dao.ArraySink(), 0, 100, null, null).getArray();\nentityJunctionsSystem = agentJunctionDAO.select(new foam.dao.ArraySink()).getArray();\n\ntest( entityJunctions.size() == 0 && entityJunctionsSystem.size() == 1, \"Regular user removed all related junctions objects.\");\n\n// *** Test Junction while acting as users *** (Setup below)\n\nagentUserAuthService = new foam.nanos.auth.AgentUserAuthService(x);\nagentUserAuthService.start();\nx = x.put(\"agentAuth\", agentUserAuthService);\nagentAuth = x.get(\"agentAuth\");\n\n// Test regular user to act as entity when relationship junction object is missing.\nthrew = false;\ntry {\nagentAuth.actAs(x, entity);\n} catch (AuthorizationException e) {\nthrew = true;\n}\n\ntest(threw, \"Unable to act as entity due to missing relationship junction object.\");\n\n// Test regular user to act as entity when relationship junction object is present.\nx = Auth.sudo(x, entity);\njunctionObj = new foam.nanos.auth.UserUserJunction();\njunctionObj.setSourceId(user.getId());\njunctionObj.setTargetId(entity.getId());\njunctionObj.setGroup(\"testGroup\");\nagentJunctionDAO.put_(x, junctionObj);\n\nx = Auth.sudo(x, user);\nentityUser = agentAuth.actAs(x, entity);\ntest( entityUser.getId() == entity.getId(), \"Able to act as entity due to present relationship junction object.\");\n\n// Mimic agentAuth\nentity = entity.fclone();\nentity.setGroup(\"testGroup\");\nx = x.put(\"user\", entity);\nx = x.put(\"agent\", user);\nuser = x.get(\"user\");\nagent = x.get(\"agent\");\n\n// Test put_ as agent acting as entity.\nagent.getAgents(x).add(entity);\njunctions = agentJunctionDAO.select_(x, new ArraySink(), 0, 100, null, null).getArray();\nnewJunction = junctions.get(1);\n\ntest( newJunction != null && newJunction.getTargetId() == agent.getId(), \"Agent successfully added junction where agent is target.\");\n\nthrew = false;\ntry {\nagent.getEntities(x).add(entity);\n} catch (AuthorizationException e){\nthrew = true;\n}\n\ntest( threw, \"Agent unable to set targetId as entity even though acting as system user.\");\n\n// Test select_ as agent acting as entity.\njunctions = agentJunctionDAO.select_(x, new ArraySink(), 0, 100, null, null).getArray();\ntest( junctions.size() == 2, \"Returns all related junction objects related to agent.\");\n\n// Test remove_ as agent acting as entity.\njunctions = agentJunctionDAO.select(new ArraySink()).getArray();\nunrelatedJunction = junctions.get(1);\n\nthrew = false;\ntry {\nagentJunctionDAO.remove_(x, unrelatedJunction);\n} catch(AuthorizationException e){\nthrew = true;\n}\n\ntest( threw, \"Agent unable to remove unrelated junction object.\");\n\n// Test removeAll_ as agent acting as entity.\nagentJunctionDAO.removeAll_(x, 0, 100, null, null);\nagentRelatedJunctions = agentJunctionDAO.select(new ArraySink()).getArray();\n\ntest(junctions.size() != agentRelatedJunctions.size(), \"Agent removed all related junction objects.\");\n\n"})
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","description":"SequenceNumberDAO tests"})
