p({"class":"foam.nanos.test.Test","id":"Password hashing","description":"Test UserPasswordHashingDAO","server":true,"code":"import foam.nanos.auth.User;\nimport foam.nanos.auth.UserPasswordHashingDAO;\nimport foam.dao.MDAO;\nimport foam.util.SafetyUtil;\nimport foam.core.X;\nimport foam.util.Password;\n\nX context = foam.core.EmptyX.instance();\n\nuserDAO = new UserPasswordHashingDAO(context, new MDAO(User.getOwnClassInfo()));\n\nFIRST_PASSWORD = \"53CUR3P455W0RD\";\n\nuser = new User();\nuser.setDesiredPassword(FIRST_PASSWORD);\nresult = userDAO.put(user);\n\ntest(! result.getPassword().equals(FIRST_PASSWORD), \"Password returned from put should not match original password.\");\ntest(Password.verify(FIRST_PASSWORD, result.getPassword()), \"Password returned from put should be hash of original password.\");\ntest(SafetyUtil.isEmpty(result.getDesiredPassword()), \"Desired password should not be returned from first put.\");\ntest(SafetyUtil.isEmpty(result.getPreviousPassword()), \"Previous password should not be returned from first put.\");\ntest(result.getPasswordLastModified() != null, \"passwordLastModified property should be set.\");\n\nprint(\"\");\nprint(\"Second put: changing password.\");\nSECOND_PASSWORD = \"5UP3R53CUR3P455W0RD\";\nuser.setDesiredPassword(SECOND_PASSWORD);\nresult2 = userDAO.put(user);\n\ntest(! result2.getPassword().equals(SECOND_PASSWORD), \"Password returned from put should not match new password.\");\ntest(Password.verify(SECOND_PASSWORD, result2.getPassword()), \"Password returned from put should be hash of new password.\");\ntest(SafetyUtil.isEmpty(result2.getDesiredPassword()), \"Desired password should not be returned from second put.\");\ntest(! SafetyUtil.isEmpty(result2.getPreviousPassword()), \"Previous password should be returned from second put.\");\ntest(Password.verify(FIRST_PASSWORD, result2.getPreviousPassword()), \"Previous password returned from put should be hash of original password.\");\ntest(result2.getPasswordLastModified().compareTo(result.getPasswordLastModified()) > 0, \"passwordLastModified property should be updated.\");","notes":""})
p({"class":"foam.nanos.test.Test","id":"MDAO test","description":"MDAO test","server":true,"scheduled":false,"code":"mdao = new foam.dao.MDAO(foam.nanos.auth.Country.getOwnClassInfo());\ncountry = new foam.nanos.auth.Country();\ncountry.setCode(\"CN\");\ncountry.setName(\"CHINA\");\nmdao.put(country);\ncountry = country.fclone();\ncountry.setCode(\"CA\");\ncountry.setName(\"CANADA\");\nmdao.put(country);\ncountry = country.fclone();\ncountry.setCode(\"USA\");\ncountry.setName(\"United States of America\");\nmdao.put(country);\nresult = mdao.find(\"CA\");\ntest(result.getName().equals(\"CANADA\"),\"test if country name of CA is CANADA?\");\nresult = mdao.find(\"CAD\");\ntest(result==null,\"test if country name of CAD not found?\");","output":"SUCCESS: test if country name of CA is CANADA?\nSUCCESS: test if country name of CAD not found?\n","notes":""})
p({"class":"foam.nanos.test.Test","id":"MapDAOTest","description":"MapDAOTest","server":true,"scheduled":false,"code":"mdao = new foam.dao.MapDAO(foam.nanos.auth.Country.getOwnClassInfo());\ncountry  = new foam.nanos.auth.Country();\ncountry.setCode(\"CN\");\ncountry.setName(\"CHINA\");\nmdao.put(country);\ncountry=country.fclone();\ncountry.setCode(\"CN2\");\ncountry.setName(\"CHINA2\");\nmdao.put(country);\nresult = mdao.find(\"CN\");\ntest(result.getName().equals(\"CHINA\"),\"test if country name of CN is CHINA?\");\nresult = mdao.find(\"CAD\");\ntest(result==null,\"test if country name of CAD not found?\");\n\n","notes":""})
p({"class":"foam.nanos.test.Test","id":"Relationship Test","description":"Tests behaviour of relationships from Java","lastRun":"2018-02-13T17:21:26.173Z","lastDuration":28,"code":"//set up\nfoam.core.X x = foam.core.EmptyX.instance();\n\nx = x.put(\"courseDAO\", new foam.dao.EasyDAO.Builder(x).\nsetContextualize(true).\nsetAuthenticate(false).\nsetOf(foam.nanos.demo.relationship.Course.getOwnClassInfo()).\nbuild());\n\nx = x.put(\"professorDAO\", new foam.dao.EasyDAO.Builder(x).\nsetGuid(true).\nsetContextualize(true).\nsetAuthenticate(false).\nsetOf(foam.nanos.demo.relationship.Professor.getOwnClassInfo()).\nbuild());\n\nx = x.put(\"studentDAO\", new foam.dao.EasyDAO.Builder(x).\nsetContextualize(true).\nsetAuthenticate(false).\nsetSeqNo(true).\nsetOf(foam.nanos.demo.relationship.Student.getOwnClassInfo()).\nbuild());\n\nx = x.put(\"studentCourseJunctionDAO\", new foam.dao.EasyDAO.Builder(x).\nsetContextualize(true).\nsetAuthenticate(false).\nsetOf(foam.nanos.demo.relationship.StudentCourseJunction.getOwnClassInfo()).\nbuild());\n\nfoam.dao.DAO studentDAO               = ((foam.dao.DAO)x.get(\"studentDAO\")).inX(x);\nfoam.dao.DAO courseDAO                = ((foam.dao.DAO)x.get(\"courseDAO\")).inX(x);\nfoam.dao.DAO professorDAO             = ((foam.dao.DAO)x.get(\"professorDAO\")).inX(x);\nfoam.dao.DAO studentCourseJunctionDAO = ((foam.dao.DAO)x.get(\"studentCourseJunctionDAO\")).inX(x);\n\nstudentDAO.put(new foam.nanos.demo.relationship.Student.Builder(x).\nsetName(\"Adam\").\nbuild());\n\nstudentDAO.put(new foam.nanos.demo.relationship.Student.Builder(x).\nsetName(\"Mike\").\nbuild());\n\ncourseDAO.put(new foam.nanos.demo.relationship.Course.Builder(x).\nsetCode(\"CS 101\").\nsetTitle(\"Intro to computer science\").\nbuild());\n\ncourseDAO.put(new foam.nanos.demo.relationship.Course.Builder(x).\nsetCode(\"CS 201\").\nsetTitle(\"Intro to computer science II\").\nbuild());\n\nfoam.nanos.demo.relationship.Professor donald =\n(foam.nanos.demo.relationship.Professor) professorDAO.put(new foam.nanos.demo.relationship.Professor.Builder(x).\nsetName(\"Donald Knuth\").\nbuild());\n\nfoam.nanos.demo.relationship.Professor alan =\n(foam.nanos.demo.relationship.Professor)professorDAO.put(new foam.nanos.demo.relationship.Professor.Builder(x).\nsetName(\"Alan Kay\").\nbuild());\n\n\n\nfoam.nanos.demo.relationship.Student adam = (foam.nanos.demo.relationship.Student)studentDAO.find(1L);\nfoam.nanos.demo.relationship.Student mike = (foam.nanos.demo.relationship.Student)studentDAO.find(2L);\n\nfoam.nanos.demo.relationship.Course cs101 = (foam.nanos.demo.relationship.Course)courseDAO.find(\"CS 101\");\nfoam.nanos.demo.relationship.Course cs201 = (foam.nanos.demo.relationship.Course)courseDAO.find(\"CS 201\");\n\n\n// Assign professors\n// TODO: should we support .add()/.remove() for 1:* relationships as\n// well?\ndonald.getCourses(x).put(cs101);\nalan.getCourses(x).put(cs201);\n\n// Enroll students\ncs101.getStudents(x).add(adam);\nmike.getCourses(x).add(cs201);\nmike.getCourses(x).add(cs101);\n\nfoam.nanos.demo.relationship.Course course = cs101;\n\ntest(course.findProfessor(x).getName() == \"Donald Knuth\", \"Getting Target Object from Source Object (1:*)\");\n\ndonaldsCourses = donald.getCourses(x).select(new foam.dao.ArraySink()).getArray();\n\ntest(donaldsCourses.get(0).getCode() == \"CS 101\", \"Getting Source Object from target Object (1:*)\");\n\nstudents = course.getStudents(x).getDAO().select(new foam.dao.ArraySink()).getArray();\n\ntest(students.size() == 2, \"(length check) Getting Source object from target Object (*:*)\");\n\ntest(students.get(0).getName() == \"Adam\", \"(Object check) Getting Source object from target Object (*:*)\");\n\nadamsCourses = adam.getCourses(x).getDAO().select(new foam.dao.ArraySink()).getArray();\n\ntest(adamsCourses.size() == 1, \"(length check) Getting Target object from Source Object (*:*)\");\n\ntest(adamsCourses.get(0).getCode() == \"CS 101\", \"(Object check) Getting Target object from Source Object (*:*)\");\n\nmikesCourses = mike.getCourses(x).getDAO().select(new foam.dao.ArraySink()).getArray();\n\ntest(mikesCourses.size() == 2, \"(length check) multiple sources *:*\");\n\ncontainsCourses = true;\n\nArrayList courseCodes = new ArrayList();\ncourseCodes.add(\"CS 101\");\ncourseCodes.add(\"CS 201\");\n\nfor(course : mikesCourses) {\ncode = course.getCode();\ncontainsCourses = containsCourses && courseCodes.contains(code);\n}\n\ntest(containsCourses, \"(Object check) multiple sources *:*\");\n\ncourse = cs201;\n\nprint(\"\");\nprint(\"**** \" + course.getCode() + \" ****\");\nprint(\"Instructor: \" + ((foam.nanos.demo.relationship.Professor)((foam.dao.DAO)x.get(\"professorDAO\")).find(course.getProfessor())).getName());\nprint(\"\");\nprint(\"*** Students ***\");\nprint(\"\");\n\nsink = (foam.dao.ArraySink)course.getStudents(x).getDAO().select(null);\ni = sink.getArray().iterator();\n\nwhile ( i.hasNext() ) {\nfoam.nanos.demo.relationship.Student student = (foam.nanos.demo.relationship.Student)i.next();\nprint(student.getName());\n}\n\nfoam.nanos.demo.relationship.Professor professor = alan;\n\nprint(\"\");\nprint(\"**** \" + professor.getName() + \" ****\");\nprint(\"*** Courses ***\");\nprint(\"\");\n\nsink = (foam.dao.ArraySink)professor.getCourses(x).select(null);\ni = sink.getArray().iterator();\n\nwhile ( i.hasNext() ) {\nfoam.nanos.demo.relationship.Course course = (foam.nanos.demo.relationship.Course)i.next();\nprint(course.getCode());\n}\n\n\nprofessor = donald;\n\nprint(\"\");\nprint(\"**** \" + professor.getName() + \" ****\");\nprint(\"*** Courses ***\");\nprint(\"\");\n\nsink = (foam.dao.ArraySink)professor.getCourses(x).select(null);\ni = sink.getArray().iterator();\n\nwhile ( i.hasNext() ) {\nfoam.nanos.demo.relationship.Course course = (foam.nanos.demo.relationship.Course)i.next();\nprint(course.getCode());\n}\n"})
p({"class":"foam.nanos.test.Test","id":"Freeze test","code":"foam.nanos.demo.relationship.Professor prof = new foam.nanos.demo.relationship.Professor();\n\nprof.setName(\"Adam\");\n\nprint(\"Name is: \" + prof.getName());\nprint(\"Freezing object.\");\n\nprof.freeze();\n\nboolean exceptionThrown = false;\n\ntry {\n  prof.setName(\"Bob\");\n} catch ( UnsupportedOperationException ex ) {\n  exceptionThrown = true;\n}\n\ntest(exceptionThrown, \"Prevented setting property of frozen object.\");\ntest(prof.getName().equals(\"Adam\"), \"Name is still Adam\");\n\nfoam.nanos.demo.relationship.Professor prof2 = prof.fclone();\n\nprint(\"Unfreezing object via cloning\");\n\nprint(\"Name was: \" + prof2.getName());\n\nprof2.setName(\"Bob\");\n\nprint(\"Name is now: \" + prof2.getName());\n\nfoam.core.X x = foam.core.EmptyX.instance();\n\nx = x.put(\"professorDAO\", new foam.dao.EasyDAO.Builder(x).\nsetGuid(true).\nsetContextualize(true).\nsetAuthenticate(false).\nsetOf(foam.nanos.demo.relationship.Professor.getOwnClassInfo()).\nbuild());\n\nfoam.dao.DAO professorDAO = ((foam.dao.DAO)x.get(\"professorDAO\"));\n\nprofessorDAO.put(prof2);\n\nfoam.dao.ArraySink sink = (foam.dao.ArraySink)professorDAO.select();\n\nprof = (foam.nanos.demo.relationship.Professor)sink.getArray().get(0);\n\nprint(\"Testing if object from DAO is frozen.\");\n\nString name1 = prof.getName();\n\nprint(\"Name is: \" + prof.getName());\n\nexceptionThrown = false;\n\ntry {\n  prof.setName(\"John\");\n} catch ( UnsupportedOperationException ex ) {\n  exceptionThrown = true;\n}\n\ntest(exceptionThrown, \"Prevented setting property of frozen object.\");\ntest(prof.getName().equals(name1), \"Name is still \" + name1);\n"})
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","description":"SequenceNumberDAO tests"})
p({"class":"foam.nanos.ruler.RulerDAOTest","id":"RulerDAOTest","description":"Rule engine test"})
p({"class":"foam.nanos.test.Test","id":"PromisedDAO Test","status":2,"code":"promisedDAO = new foam.dao.PromisedDAO.Builder(x)\n  .setOf(foam.nanos.auth.Country.getOwnClassInfo())\n  .build();\n\nnew Thread() {\n  public void run() {\n    mdao = new foam.dao.MDAO(foam.nanos.auth.Country.getOwnClassInfo());\n    country = new foam.nanos.auth.Country();\n    country.setCode(\"CN\");\n    country.setName(\"CHINA\");\n    mdao.put(country);\n    promisedDAO.setPromise(mdao);\n  }\n}.start();\n\ntest(promisedDAO.select().getArray().size() == 1, \"DAO has 1 element\");"})
p({"class":"foam.nanos.test.Test","id":"PromisedDAO Test","passed":1,"lastRun":"2019-02-09T16:45:22.301Z","lastDuration":65,"status":1,"output":"SUCCESS: DAO has 1 element\n"})
p({"class":"foam.nanos.test.Test","id":"Freeze test","status":2})
p({"class":"foam.nanos.test.Test","id":"MDAO test","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"Password hashing","status":2})
p({"class":"foam.nanos.test.Test","id":"PromisedDAO Test","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"MapDAOTest","status":2})
p({"class":"foam.nanos.test.Test","id":"Relationship Test","status":2})
p({"class":"foam.nanos.test.Test","id":"MDAO test","passed":2,"lastRun":"2019-02-09T16:45:41.973Z","lastDuration":86,"status":1,"output":"SUCCESS: test if country name of CA is CANADA?\nSUCCESS: test if country name of CAD not found?\n"})
p({"class":"foam.nanos.test.Test","id":"RuleDAOtest","status":2})
p({"class":"foam.nanos.test.Test","id":"Freeze test","passed":4,"lastRun":"2019-02-09T16:45:41.990Z","lastDuration":104,"status":1,"output":"Name is: Adam\nFreezing object.\nSUCCESS: Prevented setting property of frozen object.\nSUCCESS: Name is still Adam\nUnfreezing object via cloning\nName was: Adam\nName is now: Bob\nTesting if object from DAO is frozen.\nName is: Bob\nSUCCESS: Prevented setting property of frozen object.\nSUCCESS: Name is still Bob\n"})
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","status":2})
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","passed":7,"lastRun":"2019-02-09T16:45:42.006Z","lastDuration":3,"status":1,"output":"\nSUCCESS: Sequence number value equals 1 before putting to DAO.\nSUCCESS: User id equals 1\nSUCCESS: Sequence number value equals 2 after putting to DAO.\nSUCCESS: Sequence number value equals 1 before putting to DAO.\nSUCCESS: User id equals 1000\nSUCCESS: Sequence number value equals 1001 after putting to DAO.\nSUCCESS: Sequence number value equals 5001 after initializing."})
p({"class":"foam.nanos.test.Test","id":"MapDAOTest","passed":2,"lastRun":"2019-02-09T16:45:42.044Z","lastDuration":95,"status":1,"output":"SUCCESS: test if country name of CN is CHINA?\nSUCCESS: test if country name of CAD not found?\n"})
p({"class":"foam.nanos.test.Test","id":"PromisedDAO Test","lastRun":"2019-02-09T16:45:42.058Z","lastDuration":115,"status":1,"output":"SUCCESS: DAO has 1 element\n"})
p({"class":"foam.nanos.test.Test","id":"Relationship Test","passed":8,"lastRun":"2019-02-09T16:45:42.120Z","lastDuration":141,"status":1,"output":"SUCCESS: Getting Target Object from Source Object (1:*)\nSUCCESS: Getting Source Object from target Object (1:*)\nSUCCESS: (length check) Getting Source object from target Object (*:*)\nSUCCESS: (Object check) Getting Source object from target Object (*:*)\nSUCCESS: (length check) Getting Target object from Source Object (*:*)\nSUCCESS: (Object check) Getting Target object from Source Object (*:*)\nSUCCESS: (length check) multiple sources *:*\nSUCCESS: (Object check) multiple sources *:*\n\n**** CS 201 ****\nInstructor: Alan Kay\n\n*** Students ***\n\nMike\n\n**** Alan Kay ****\n*** Courses ***\n\nCS 201\n\n**** Donald Knuth ****\n*** Courses ***\n\nCS 101\n"})
p({"class":"foam.nanos.test.Test","id":"RuleDAOtest","failed":1,"lastRun":"2019-02-09T16:45:42.517Z","lastDuration":526,"status":1,"output":"FAILURE: null\njava.lang.StackOverflowError\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos...."})
p({"class":"foam.nanos.test.Test","id":"Password hashing","passed":11,"lastRun":"2019-02-09T16:45:42.672Z","lastDuration":731,"status":1,"output":"SUCCESS: Password returned from put should not match original password.\nSUCCESS: Password returned from put should be hash of original password.\nSUCCESS: Desired password should not be returned from first put.\nSUCCESS: Previous password should not be returned from first put.\nSUCCESS: passwordLastModified property should be set.\n\nSecond put: changing password.\nSUCCESS: Password returned from put should not match new password.\nSUCCESS: Password returned from put should be hash of new password.\nSUCCESS: Desired password should not be returned from second put.\nSUCCESS: Previous password should be returned from second put.\nSUCCESS: Previous password returned from put should be hash of original password.\nSUCCESS: passwordLastModified property should be updated.\n"})

p({"class":"foam.nanos.test.Test","id":"MapDAOTest","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"Password hashing","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"Relationship Test","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"Freeze test","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"PromisedDAO Test","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"MDAO test","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"MDAO test","lastRun":"2019-02-09T16:59:12.860Z","lastDuration":26,"status":1,"output":"SUCCESS: test if country name of CA is CANADA?\nSUCCESS: test if country name of CAD not found?\n"})
p({"class":"foam.nanos.test.Test","id":"RuleDAOtest","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"MapDAOTest","lastRun":"2019-02-09T16:59:12.893Z","lastDuration":59,"status":1,"output":"SUCCESS: test if country name of CN is CHINA?\nSUCCESS: test if country name of CAD not found?\n"})
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","status":2,"output":""})
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","lastRun":"2019-02-09T16:59:12.906Z","lastDuration":2,"status":1,"output":"\nSUCCESS: Sequence number value equals 1 before putting to DAO.\nSUCCESS: User id equals 1\nSUCCESS: Sequence number value equals 2 after putting to DAO.\nSUCCESS: Sequence number value equals 1 before putting to DAO.\nSUCCESS: User id equals 1000\nSUCCESS: Sequence number value equals 1001 after putting to DAO.\nSUCCESS: Sequence number value equals 5001 after initializing."})
p({"class":"foam.nanos.test.Test","id":"Freeze test","lastRun":"2019-02-09T16:59:12.955Z","lastDuration":120,"status":1,"output":"Name is: Adam\nFreezing object.\nSUCCESS: Prevented setting property of frozen object.\nSUCCESS: Name is still Adam\nUnfreezing object via cloning\nName was: Adam\nName is now: Bob\nTesting if object from DAO is frozen.\nName is: Bob\nSUCCESS: Prevented setting property of frozen object.\nSUCCESS: Name is still Bob\n"})
p({"class":"foam.nanos.test.Test","id":"PromisedDAO Test","lastRun":"2019-02-09T16:59:13.012Z","lastDuration":175,"status":1,"output":"SUCCESS: DAO has 1 element\n"})
p({"class":"foam.nanos.test.Test","id":"Relationship Test","lastRun":"2019-02-09T16:59:13.128Z","lastDuration":294,"status":1,"output":"SUCCESS: Getting Target Object from Source Object (1:*)\nSUCCESS: Getting Source Object from target Object (1:*)\nSUCCESS: (length check) Getting Source object from target Object (*:*)\nSUCCESS: (Object check) Getting Source object from target Object (*:*)\nSUCCESS: (length check) Getting Target object from Source Object (*:*)\nSUCCESS: (Object check) Getting Target object from Source Object (*:*)\nSUCCESS: (length check) multiple sources *:*\nSUCCESS: (Object check) multiple sources *:*\n\n**** CS 201 ****\nInstructor: Alan Kay\n\n*** Students ***\n\nMike\n\n**** Alan Kay ****\n*** Courses ***\n\nCS 201\n\n**** Donald Knuth ****\n*** Courses ***\n\nCS 101\n"})
p({"class":"foam.nanos.test.Test","id":"RuleDAOtest","lastRun":"2019-02-09T16:59:13.328Z","lastDuration":429,"status":1,"output":"FAILURE: null\njava.lang.StackOverflowError\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos.ruler.AbstractRule.f(AbstractRule.java:923)\n\tat foam.nanos...."})
p({"class":"foam.nanos.test.Test","id":"Password hashing","lastRun":"2019-02-09T16:59:13.503Z","lastDuration":669,"status":1,"output":"SUCCESS: Password returned from put should not match original password.\nSUCCESS: Password returned from put should be hash of original password.\nSUCCESS: Desired password should not be returned from first put.\nSUCCESS: Previous password should not be returned from first put.\nSUCCESS: passwordLastModified property should be set.\n\nSecond put: changing password.\nSUCCESS: Password returned from put should not match new password.\nSUCCESS: Password returned from put should be hash of new password.\nSUCCESS: Desired password should not be returned from second put.\nSUCCESS: Previous password should be returned from second put.\nSUCCESS: Previous password returned from put should be hash of original password.\nSUCCESS: passwordLastModified property should be updated.\n"})
