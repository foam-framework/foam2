p({"class":"foam.nanos.test.Test","id":"Password hashing","description":"Test UserPasswordHashingDAO","server":true,"code":"import foam.nanos.auth.User;\nimport foam.nanos.auth.UserPasswordHashingDAO;\nimport foam.dao.MDAO;\nimport foam.util.SafetyUtil;\nimport foam.core.X;\nimport foam.util.Password;\n\nX context = foam.core.EmptyX.instance();\n\nuserDAO = new UserPasswordHashingDAO(context, new MDAO(User.getOwnClassInfo()));\n\nFIRST_PASSWORD = \"53CUR3P455W0RD\";\n\nuser = new User();\nuser.setDesiredPassword(FIRST_PASSWORD);\nresult = userDAO.put(user);\n\ntest(! result.getPassword().equals(FIRST_PASSWORD), \"Password returned from put should not match original password.\");\ntest(Password.verify(FIRST_PASSWORD, result.getPassword()), \"Password returned from put should be hash of original password.\");\ntest(SafetyUtil.isEmpty(result.getDesiredPassword()), \"Desired password should not be returned from first put.\");\ntest(SafetyUtil.isEmpty(result.getPreviousPassword()), \"Previous password should not be returned from first put.\");\ntest(result.getPasswordLastModified() != null, \"passwordLastModified property should be set.\");\n\nprint(\"\");\nprint(\"Second put: changing password.\");\nSECOND_PASSWORD = \"5UP3R53CUR3P455W0RD\";\nuser.setDesiredPassword(SECOND_PASSWORD);\nresult2 = userDAO.put(user);\n\ntest(! result2.getPassword().equals(SECOND_PASSWORD), \"Password returned from put should not match new password.\");\ntest(Password.verify(SECOND_PASSWORD, result2.getPassword()), \"Password returned from put should be hash of new password.\");\ntest(SafetyUtil.isEmpty(result2.getDesiredPassword()), \"Desired password should not be returned from second put.\");\ntest(! SafetyUtil.isEmpty(result2.getPreviousPassword()), \"Previous password should be returned from second put.\");\ntest(Password.verify(FIRST_PASSWORD, result2.getPreviousPassword()), \"Previous password returned from put should be hash of original password.\");\ntest(result2.getPasswordLastModified().compareTo(result.getPasswordLastModified()) > 0, \"passwordLastModified property should be updated.\");","notes":""})
p({"class":"foam.nanos.test.Test","id":"MDAO test","description":"MDAO test","server":true,"scheduled":false,"code":"mdao = new foam.dao.MDAO(foam.nanos.auth.Country.getOwnClassInfo());\ncountry = new foam.nanos.auth.Country();\ncountry.setCode(\"CN\");\ncountry.setName(\"CHINA\");\nmdao.put(country);\ncountry = country.fclone();\ncountry.setCode(\"CA\");\ncountry.setName(\"CANADA\");\nmdao.put(country);\ncountry = country.fclone();\ncountry.setCode(\"USA\");\ncountry.setName(\"United States of America\");\nmdao.put(country);\nresult = mdao.find(\"CA\");\ntest(result.getName().equals(\"CANADA\"),\"test if country name of CA is CANADA?\");\nresult = mdao.find(\"CAD\");\ntest(result==null,\"test if country name of CAD not found?\");","output":"SUCCESS: test if country name of CA is CANADA?\nSUCCESS: test if country name of CAD not found?\n","notes":""})
p({"class":"foam.nanos.test.Test","id":"MapDAOTest","description":"MapDAOTest","server":true,"scheduled":false,"code":"mdao = new foam.dao.MapDAO(foam.nanos.auth.Country.getOwnClassInfo());\ncountry  = new foam.nanos.auth.Country();\ncountry.setCode(\"CN\");\ncountry.setName(\"CHINA\");\nmdao.put(country);\ncountry=country.fclone();\ncountry.setCode(\"CN2\");\ncountry.setName(\"CHINA2\");\nmdao.put(country);\nresult = mdao.find(\"CN\");\ntest(result.getName().equals(\"CHINA\"),\"test if country name of CN is CHINA?\");\nresult = mdao.find(\"CAD\");\ntest(result==null,\"test if country name of CAD not found?\");\n\n","notes":""})
p({"class":"foam.nanos.test.Test","id":"Relationship Test","description":"Tests behaviour of relationships from Java","lastRun":"2018-02-13T17:21:26.173Z","lastDuration":28,"code":"//set up\nfoam.core.X x = foam.core.EmptyX.instance();\n\nx = x.put(\"courseDAO\", new foam.dao.EasyDAO.Builder(x).\nsetContextualize(true).\nsetAuthorize(false).\nsetOf(foam.nanos.demo.relationship.Course.getOwnClassInfo()).\nsetRuler(false).\nbuild());\n\nx = x.put(\"professorDAO\", new foam.dao.EasyDAO.Builder(x).\nsetGuid(true).\nsetContextualize(true).\nsetAuthorize(false).\nsetOf(foam.nanos.demo.relationship.Professor.getOwnClassInfo()).\nsetRuler(false).\nbuild());\n\nx = x.put(\"studentDAO\", new foam.dao.EasyDAO.Builder(x).\nsetContextualize(true).\nsetAuthorize(false).\nsetSeqNo(true).\nsetOf(foam.nanos.demo.relationship.Student.getOwnClassInfo()).\nsetRuler(false).\nbuild());\n\nx = x.put(\"studentCourseJunctionDAO\", new foam.dao.EasyDAO.Builder(x).\nsetContextualize(true).\nsetAuthorize(false).\nsetOf(foam.nanos.demo.relationship.StudentCourseJunction.getOwnClassInfo()).\nsetRuler(false).\nbuild());\n\nfoam.dao.DAO studentDAO               = ((foam.dao.DAO)x.get(\"studentDAO\")).inX(x);\nfoam.dao.DAO courseDAO                = ((foam.dao.DAO)x.get(\"courseDAO\")).inX(x);\nfoam.dao.DAO professorDAO             = ((foam.dao.DAO)x.get(\"professorDAO\")).inX(x);\nfoam.dao.DAO studentCourseJunctionDAO = ((foam.dao.DAO)x.get(\"studentCourseJunctionDAO\")).inX(x);\n\nstudentDAO.put(new foam.nanos.demo.relationship.Student.Builder(x).\nsetName(\"Adam\").\nbuild());\n\nstudentDAO.put(new foam.nanos.demo.relationship.Student.Builder(x).\nsetName(\"Mike\").\nbuild());\n\ncourseDAO.put(new foam.nanos.demo.relationship.Course.Builder(x).\nsetCode(\"CS 101\").\nsetTitle(\"Intro to computer science\").\nbuild());\n\ncourseDAO.put(new foam.nanos.demo.relationship.Course.Builder(x).\nsetCode(\"CS 201\").\nsetTitle(\"Intro to computer science II\").\nbuild());\n\nfoam.nanos.demo.relationship.Professor donald =\n(foam.nanos.demo.relationship.Professor) professorDAO.put(new foam.nanos.demo.relationship.Professor.Builder(x).\nsetName(\"Donald Knuth\").\nbuild());\n\nfoam.nanos.demo.relationship.Professor alan =\n(foam.nanos.demo.relationship.Professor)professorDAO.put(new foam.nanos.demo.relationship.Professor.Builder(x).\nsetName(\"Alan Kay\").\nbuild());\n\n\n\nfoam.nanos.demo.relationship.Student adam = (foam.nanos.demo.relationship.Student)studentDAO.find(1L);\nfoam.nanos.demo.relationship.Student mike = (foam.nanos.demo.relationship.Student)studentDAO.find(2L);\n\nfoam.nanos.demo.relationship.Course cs101 = (foam.nanos.demo.relationship.Course)courseDAO.find(\"CS 101\");\nfoam.nanos.demo.relationship.Course cs201 = (foam.nanos.demo.relationship.Course)courseDAO.find(\"CS 201\");\n\n\n// Assign professors\n// TODO: should we support .add()/.remove() for 1:* relationships as\n// well?\ndonald.getCourses(x).put(cs101);\nalan.getCourses(x).put(cs201);\n\n// Enroll students\ncs101.getStudents(x).add(adam);\nmike.getCourses(x).add(cs201);\nmike.getCourses(x).add(cs101);\n\nfoam.nanos.demo.relationship.Course course = cs101;\n\ntest(course.findProfessor(x).getName() == \"Donald Knuth\", \"Getting Target Object from Source Object (1:*)\");\n\ndonaldsCourses = donald.getCourses(x).select(new foam.dao.ArraySink()).getArray();\n\ntest(donaldsCourses.get(0).getCode() == \"CS 101\", \"Getting Source Object from target Object (1:*)\");\n\nstudents = course.getStudents(x).getDAO().select(new foam.dao.ArraySink()).getArray();\n\ntest(students.size() == 2, \"(length check) Getting Source object from target Object (*:*)\");\n\ntest(students.get(0).getName() == \"Adam\", \"(Object check) Getting Source object from target Object (*:*)\");\n\nadamsCourses = adam.getCourses(x).getDAO().select(new foam.dao.ArraySink()).getArray();\n\ntest(adamsCourses.size() == 1, \"(length check) Getting Target object from Source Object (*:*)\");\n\ntest(adamsCourses.get(0).getCode() == \"CS 101\", \"(Object check) Getting Target object from Source Object (*:*)\");\n\nmikesCourses = mike.getCourses(x).getDAO().select(new foam.dao.ArraySink()).getArray();\n\ntest(mikesCourses.size() == 2, \"(length check) multiple sources *:*\");\n\ncontainsCourses = true;\n\nArrayList courseCodes = new ArrayList();\ncourseCodes.add(\"CS 101\");\ncourseCodes.add(\"CS 201\");\n\nfor(course : mikesCourses) {\ncode = course.getCode();\ncontainsCourses = containsCourses && courseCodes.contains(code);\n}\n\ntest(containsCourses, \"(Object check) multiple sources *:*\");\n\ncourse = cs201;\n\nprint(\"\");\nprint(\"**** \" + course.getCode() + \" ****\");\nprint(\"Instructor: \" + ((foam.nanos.demo.relationship.Professor)((foam.dao.DAO)x.get(\"professorDAO\")).find(course.getProfessor())).getName());\nprint(\"\");\nprint(\"*** Students ***\");\nprint(\"\");\n\nsink = (foam.dao.ArraySink)course.getStudents(x).getDAO().select(null);\ni = sink.getArray().iterator();\n\nwhile ( i.hasNext() ) {\nfoam.nanos.demo.relationship.Student student = (foam.nanos.demo.relationship.Student)i.next();\nprint(student.getName());\n}\n\nfoam.nanos.demo.relationship.Professor professor = alan;\n\nprint(\"\");\nprint(\"**** \" + professor.getName() + \" ****\");\nprint(\"*** Courses ***\");\nprint(\"\");\n\nsink = (foam.dao.ArraySink)professor.getCourses(x).select(null);\ni = sink.getArray().iterator();\n\nwhile ( i.hasNext() ) {\nfoam.nanos.demo.relationship.Course course = (foam.nanos.demo.relationship.Course)i.next();\nprint(course.getCode());\n}\n\n\nprofessor = donald;\n\nprint(\"\");\nprint(\"**** \" + professor.getName() + \" ****\");\nprint(\"*** Courses ***\");\nprint(\"\");\n\nsink = (foam.dao.ArraySink)professor.getCourses(x).select(null);\ni = sink.getArray().iterator();\n\nwhile ( i.hasNext() ) {\nfoam.nanos.demo.relationship.Course course = (foam.nanos.demo.relationship.Course)i.next();\nprint(course.getCode());\n}\n"})
p({"class":"foam.nanos.test.Test","id":"Freeze test","code":"foam.nanos.demo.relationship.Professor prof = new foam.nanos.demo.relationship.Professor();\n\nprof.setName(\"Adam\");\n\nprint(\"Name is: \" + prof.getName());\nprint(\"Freezing object.\");\n\nprof.freeze();\n\nboolean exceptionThrown = false;\n\ntry {\n  prof.setName(\"Bob\");\n} catch ( UnsupportedOperationException ex ) {\n  exceptionThrown = true;\n}\n\ntest(exceptionThrown, \"Prevented setting property of frozen object.\");\ntest(prof.getName().equals(\"Adam\"), \"Name is still Adam\");\n\nfoam.nanos.demo.relationship.Professor prof2 = prof.fclone();\n\nprint(\"Unfreezing object via cloning\");\n\nprint(\"Name was: \" + prof2.getName());\n\nprof2.setName(\"Bob\");\n\nprint(\"Name is now: \" + prof2.getName());\n\nfoam.core.X x = foam.core.EmptyX.instance();\n\nx = x.put(\"professorDAO\", new foam.dao.EasyDAO.Builder(x).\nsetGuid(true).\nsetContextualize(true).\nsetAuthorize(false).\nsetOf(foam.nanos.demo.relationship.Professor.getOwnClassInfo()).\nsetRuler(false).\nbuild());\n\nfoam.dao.DAO professorDAO = ((foam.dao.DAO)x.get(\"professorDAO\"));\n\nprofessorDAO.put(prof2);\n\nfoam.dao.ArraySink sink = (foam.dao.ArraySink)professorDAO.select();\n\nprof = (foam.nanos.demo.relationship.Professor)sink.getArray().get(0);\n\nprint(\"Testing if object from DAO is frozen.\");\n\nString name1 = prof.getName();\n\nprint(\"Name is: \" + prof.getName());\n\nexceptionThrown = false;\n\ntry {\n  prof.setName(\"John\");\n} catch ( UnsupportedOperationException ex ) {\n  exceptionThrown = true;\n}\n\ntest(exceptionThrown, \"Prevented setting property of frozen object.\");\ntest(prof.getName().equals(name1), \"Name is still \" + name1);\n"})
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","description":"SequenceNumberDAO tests"})
p({"class":"foam.nanos.ruler.test.RulerDAOTest","id":"RulerDAOTest","description":"Rule engine test"})
// Fix and uncomment if PromisedDAO is ever used in Java
// p({"class":"foam.nanos.test.Test","id":"PromisedDAO Test","status":2,"code":"promisedDAO = new foam.dao.PromisedDAO.Builder(x)\n  .setOf(foam.nanos.auth.Country.getOwnClassInfo())\n  .build();\n\nnew Thread() {\n  public void run() {\n    mdao = new foam.dao.MDAO(foam.nanos.auth.Country.getOwnClassInfo());\n    country = new foam.nanos.auth.Country();\n    country.setCode(\"CN\");\n    country.setName(\"CHINA\");\n    mdao.put(country);\n    promisedDAO.setPromise(mdao);\n  }\n}.start();\n\ntest(promisedDAO.select().getArray().size() == 1, \"DAO has 1 element\");"})
p({"class":"foam.nanos.test.Test","id":"Freeze test","status":2})
p({"class":"foam.nanos.test.Test","id":"MDAO test","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"Password hashing","status":2})
p({"class":"foam.nanos.test.Test","id":"MapDAOTest","status":2})
p({"class":"foam.nanos.test.Test","id":"Relationship Test","status":2})
p({"class":"foam.nanos.test.Test","id":"MDAO test","passed":2,"lastRun":"2019-02-09T16:45:41.973Z","lastDuration":86,"status":1,"output":"SUCCESS: test if country name of CA is CANADA?\nSUCCESS: test if country name of CAD not found?\n"})
p({"class":"foam.nanos.test.Test","id":"Freeze test","passed":4,"lastRun":"2019-02-09T16:45:41.990Z","lastDuration":104,"status":1,"output":"Name is: Adam\nFreezing object.\nSUCCESS: Prevented setting property of frozen object.\nSUCCESS: Name is still Adam\nUnfreezing object via cloning\nName was: Adam\nName is now: Bob\nTesting if object from DAO is frozen.\nName is: Bob\nSUCCESS: Prevented setting property of frozen object.\nSUCCESS: Name is still Bob\n"})
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","status":2})
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","passed":7,"lastRun":"2019-02-09T16:45:42.006Z","lastDuration":3,"status":1,"output":"\nSUCCESS: Sequence number value equals 1 before putting to DAO.\nSUCCESS: User id equals 1\nSUCCESS: Sequence number value equals 2 after putting to DAO.\nSUCCESS: Sequence number value equals 1 before putting to DAO.\nSUCCESS: User id equals 1000\nSUCCESS: Sequence number value equals 1001 after putting to DAO.\nSUCCESS: Sequence number value equals 5001 after initializing."})
p({"class":"foam.nanos.test.Test","id":"MapDAOTest","passed":2,"lastRun":"2019-02-09T16:45:42.044Z","lastDuration":95,"status":1,"output":"SUCCESS: test if country name of CN is CHINA?\nSUCCESS: test if country name of CAD not found?\n"})
p({"class":"foam.nanos.test.Test","id":"PromisedDAO Test","lastRun":"2019-02-09T16:45:42.058Z","lastDuration":115,"status":1,"output":"SUCCESS: DAO has 1 element\n"})
p({"class":"foam.nanos.test.Test","id":"Relationship Test","passed":8,"lastRun":"2019-02-09T16:45:42.120Z","lastDuration":141,"status":1,"output":"SUCCESS: Getting Target Object from Source Object (1:*)\nSUCCESS: Getting Source Object from target Object (1:*)\nSUCCESS: (length check) Getting Source object from target Object (*:*)\nSUCCESS: (Object check) Getting Source object from target Object (*:*)\nSUCCESS: (length check) Getting Target object from Source Object (*:*)\nSUCCESS: (Object check) Getting Target object from Source Object (*:*)\nSUCCESS: (length check) multiple sources *:*\nSUCCESS: (Object check) multiple sources *:*\n\n**** CS 201 ****\nInstructor: Alan Kay\n\n*** Students ***\n\nMike\n\n**** Alan Kay ****\n*** Courses ***\n\nCS 201\n\n**** Donald Knuth ****\n*** Courses ***\n\nCS 101\n"})
p({"class":"foam.nanos.test.Test","id":"Password hashing","passed":11,"lastRun":"2019-02-09T16:45:42.672Z","lastDuration":731,"status":1,"output":"SUCCESS: Password returned from put should not match original password.\nSUCCESS: Password returned from put should be hash of original password.\nSUCCESS: Desired password should not be returned from first put.\nSUCCESS: Previous password should not be returned from first put.\nSUCCESS: passwordLastModified property should be set.\n\nSecond put: changing password.\nSUCCESS: Password returned from put should not match new password.\nSUCCESS: Password returned from put should be hash of new password.\nSUCCESS: Desired password should not be returned from second put.\nSUCCESS: Previous password should be returned from second put.\nSUCCESS: Previous password returned from put should be hash of original password.\nSUCCESS: passwordLastModified property should be updated.\n"})
p({"class":"foam.nanos.test.Test","id":"MapDAOTest","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"Password hashing","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"Relationship Test","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"Freeze test","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"MDAO test","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"MDAO test","lastRun":"2019-02-09T16:59:12.860Z","lastDuration":26,"status":1,"output":"SUCCESS: test if country name of CA is CANADA?\nSUCCESS: test if country name of CAD not found?\n"})
p({"class":"foam.nanos.test.Test","id":"MapDAOTest","lastRun":"2019-02-09T16:59:12.893Z","lastDuration":59,"status":1,"output":"SUCCESS: test if country name of CN is CHINA?\nSUCCESS: test if country name of CAD not found?\n"})
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","status":2,"output":""})
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","lastRun":"2019-02-09T16:59:12.906Z","lastDuration":2,"status":1,"output":"\nSUCCESS: Sequence number value equals 1 before putting to DAO.\nSUCCESS: User id equals 1\nSUCCESS: Sequence number value equals 2 after putting to DAO.\nSUCCESS: Sequence number value equals 1 before putting to DAO.\nSUCCESS: User id equals 1000\nSUCCESS: Sequence number value equals 1001 after putting to DAO.\nSUCCESS: Sequence number value equals 5001 after initializing."})
p({"class":"foam.nanos.test.Test","id":"Freeze test","lastRun":"2019-02-09T16:59:12.955Z","lastDuration":120,"status":1,"output":"Name is: Adam\nFreezing object.\nSUCCESS: Prevented setting property of frozen object.\nSUCCESS: Name is still Adam\nUnfreezing object via cloning\nName was: Adam\nName is now: Bob\nTesting if object from DAO is frozen.\nName is: Bob\nSUCCESS: Prevented setting property of frozen object.\nSUCCESS: Name is still Bob\n"})
p({"class":"foam.nanos.test.Test","id":"Relationship Test","lastRun":"2019-02-09T16:59:13.128Z","lastDuration":294,"status":1,"output":"SUCCESS: Getting Target Object from Source Object (1:*)\nSUCCESS: Getting Source Object from target Object (1:*)\nSUCCESS: (length check) Getting Source object from target Object (*:*)\nSUCCESS: (Object check) Getting Source object from target Object (*:*)\nSUCCESS: (length check) Getting Target object from Source Object (*:*)\nSUCCESS: (Object check) Getting Target object from Source Object (*:*)\nSUCCESS: (length check) multiple sources *:*\nSUCCESS: (Object check) multiple sources *:*\n\n**** CS 201 ****\nInstructor: Alan Kay\n\n*** Students ***\n\nMike\n\n**** Alan Kay ****\n*** Courses ***\n\nCS 201\n\n**** Donald Knuth ****\n*** Courses ***\n\nCS 101\n"})
p({"class":"foam.nanos.test.Test","id":"Password hashing","lastRun":"2019-02-09T16:59:13.503Z","lastDuration":669,"status":1,"output":"SUCCESS: Password returned from put should not match original password.\nSUCCESS: Password returned from put should be hash of original password.\nSUCCESS: Desired password should not be returned from first put.\nSUCCESS: Previous password should not be returned from first put.\nSUCCESS: passwordLastModified property should be set.\n\nSecond put: changing password.\nSUCCESS: Password returned from put should not match new password.\nSUCCESS: Password returned from put should be hash of new password.\nSUCCESS: Desired password should not be returned from second put.\nSUCCESS: Previous password should be returned from second put.\nSUCCESS: Previous password returned from put should be hash of original password.\nSUCCESS: passwordLastModified property should be updated.\n"})
p({"class":"foam.nanos.test.Test","id":"e2e-json-serialization-test","description":"End to End JSON Serialization Test","server":false,"code":"var jsonParser = foam.json.Parser.create({ strict: true });\n\nvar initialObject = foam.test.AllSerializableProperties.createPopulated();\n\nvar jsSerialized = foam.json.Network.stringify(initialObject);\n\nlog(\"JS Serialization: \", jsSerialized);\n\nvar afterJSSerialization = jsonParser.parseString(jsSerialized);\n\ntest(foam.util.equals(initialObject, afterJSSerialization), \"After JS Serialization object is still equivalent.\");\n\nx[\"serializationTestEchoService\"].echo(afterJSSerialization).then(function(afterJavaSerialization) {\n  var diff = initialObject.diff(afterJavaSerialization);\n  for ( var keys = Object.keys(diff), i = 0, key ; key = keys[i++] ; ) {\n    log(\"Differs on property \", key, \": \", diff[key]);\n  }\n  test(foam.util.equals(initialObject, afterJavaSerialization), \"After Java Serialization object is still equivalent.\");\n});\n"})
p({"class":"foam.nanos.test.Test","id":"e2e-json-serialization-test","passed":2,"lastRun":"2019-04-30T21:06:54.403Z","lastDuration":146,"status":2,"output":"JS Serialization: {\"class\":\"foam.test.AllSerializableProperties\",\"intProp\":12,\"stringProp\":\"asdf\",\"fObjectArrayProp\":[{\"description\":\"An object in an array!\"},{\"description\":\"Another object in an array!\"}],\"objectProp\":[1,\"foo\",{\"class\":\"__Timestamp__\",\"value\":\"2019-04-30T21:06:54.291Z\"},{\"class\":\"__Class__\",\"forClass_\":\"foam.test.AllSerializableProperties\"},[3,4]],\"classProp\":{\"class\":\"__Class__\",\"forClass_\":\"foam.test.AllProperties\"},\"fObjectPropertyProp\":{\"description\":\"some object\"},\"emailProp\":\"test@example.com\",\"enumProp\":1,\"dateProp\":819188640000,\"dateTimeProp\":819278624000,\"floatProp\":1.2345,\"longProp\":12341234,\"currencyProp\":342342,\"colorProp\":\"rgba(0, 0, 255, 0)\",\"mapProp\":{},\"imageProp\":\"/favicon/favicon-32x32.png\",\"urlProp\":\"https://google.com/\",\"passwordProp\":\"superSecret111!\",\"phoneNumberProp\":\"555-3455\"}\nSUCCESS: After JS Serialization object is still equivalent.\nSUCCESS: After Java Serialization object is still equivalent.\n"})
p({"class":"foam.nanos.test.Test","id":"e2e-json-serialization-test","status":1})
p({"class":"foam.nanos.test.Test","id":"json-outputter-copy-from-test","server":false,"code":"var outputter = foam.json.Outputter.create().copyFrom(foam.json.Network);\n\ntest(foam.util.equals(outputter, foam.json.Network), \"JSON Outputter should set properties correctly when copying from other JSON Outputter object.\");"})
p({"class":"foam.nanos.test.Test","passed":10,"failed":0,"id":"FoldAndReduceTest","description":"A test for the FoldManager and ReduceManager","lastRun":"2019-06-16T14:08:13.968Z","lastDuration":136,"status":1,"code":"import foam.nanos.test.StockSnapshot;\nimport foam.nanos.analytics.Candlestick;\nimport static foam.mlang.MLang.*;\n\n// Setup:\n\nhourly = 60 * 60 * 1000;\ndaily = 24 * 60 * 60 * 1000;\nweekly = 7 * 24 * 60 * 60 * 1000;\n\nhourlyDAO = new foam.dao.MDAO(Candlestick.getOwnClassInfo());\ndailyDAO = new foam.dao.MDAO(Candlestick.getOwnClassInfo());\nweeklyDAO = new foam.dao.MDAO(Candlestick.getOwnClassInfo());\n\nfm = new foam.nanos.analytics.DAOFoldManager.Builder(x)\n    .setDao(hourlyDAO)\n    .setPeriodLengthMs(hourly)\n    .build();\n\nstockDAO = new foam.nanos.analytics.FoldManagerDAODecorator.Builder(x)\n    .setDelegate(new foam.dao.MDAO(StockSnapshot.getOwnClassInfo()))\n    .setFm(fm)\n    .build();\n\ndailyRm = new foam.nanos.analytics.DAOReduceManager.Builder(x)\n    .setSourceDAO(hourlyDAO)\n    .setDestDAO(dailyDAO)\n    .setPeriodLengthMs(daily)\n    .build();\n\nweeklyRm = new foam.nanos.analytics.DAOReduceManager.Builder(x)\n    .setSourceDAO(dailyDAO)\n    .setDestDAO(weeklyDAO)\n    .setPeriodLengthMs(weekly)\n    .build();\n    \n// Test data:\n    \n// First hour.\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(5))\n    .setPrice(500)\n    .build());\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(10))\n    .setPrice(650)\n    .build());\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(20))\n    .setPrice(600)\n    .build());\n\n// Second hour.\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(hourly + 5))\n    .setPrice(1000)\n    .build());\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(hourly + 10))\n    .setPrice(2000)\n    .build());\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(hourly + 20))\n    .setPrice(3000)\n    .build());\n\n// Second day.\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(daily + 5))\n    .setPrice(300)\n    .build());\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(daily+ 10))\n    .setPrice(100)\n    .build());\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(daily + 20))\n    .setPrice(200)\n    .build());\n\ntest(stockDAO.select(COUNT()).getValue() == 9,\n    \"Stock DAO has expected number of items\");\n    \nprint(\"\");\nprint(\"Hourly data validation\");\n\nhourlyData = hourlyDAO.orderBy(Candlestick.OPEN_TIME).select().getArray();\ntest(hourlyData.size() == 3,\n    \"Hourly DAO has expected number of items\");\n\nexpected = new Candlestick.Builder(x)\n    .setKey(\"TSLA\")\n    .setOpenTime(new Date(0))\n    .setCloseTime(new Date(hourly - 1))\n    .setOpen(500)\n    .setOpenValueTime(new Date(5))\n    .setClose(600)\n    .setCloseValueTime(new Date(20))\n    .setTotal(1750)\n    .setMin(500)\n    .setMax(650)\n    .setCount(3)\n    .build();\n\ndiff = expected.diff(hourlyData.get(0));\ntest(diff.keySet().size() == 0,\n    diff.keySet() + \" fields are set incorrectly\");\n\nexpected = new Candlestick.Builder(x)\n    .setKey(\"TSLA\")\n    .setOpenTime(new Date(hourly))\n    .setCloseTime(new Date(hourly*2 - 1))\n    .setOpen(1000)\n    .setOpenValueTime(new Date(hourly+5))\n    .setClose(3000)\n    .setCloseValueTime(new Date(hourly+20))\n    .setTotal(6000)\n    .setMin(1000)\n    .setMax(3000)\n    .setCount(3)\n    .build();\n\ndiff = expected.diff(hourlyData.get(1));\ntest(diff.keySet().size() == 0,\n    diff.keySet() + \" fields are set incorrectly\");\n\nexpected = new Candlestick.Builder(x)\n    .setKey(\"TSLA\")\n    .setOpenTime(new Date(daily))\n    .setCloseTime(new Date(daily + hourly - 1))\n    .setOpen(300)\n    .setOpenValueTime(new Date(daily+5))\n    .setClose(200)\n    .setCloseValueTime(new Date(daily+20))\n    .setTotal(600)\n    .setMin(100)\n    .setMax(300)\n    .setCount(3)\n    .build();\n\ndiff = expected.diff(hourlyData.get(2));\ntest(diff.keySet().size() == 0,\n    diff.keySet() + \" fields are set incorrectly\");\n    \nprint(\"\");\nprint(\"Daily data validation\");\n\ndailyRm.doReduce();\n\ndailyData = dailyDAO.orderBy(Candlestick.OPEN_TIME).select().getArray();\ntest(dailyData.size() == 2,\n    \"Daily DAO has expected number of items\");\n\nexpected = new Candlestick.Builder(x)\n    .setKey(\"TSLA\")\n    .setOpenTime(new Date(0))\n    .setCloseTime(new Date(daily - 1))\n    .setOpen(500)\n    .setOpenValueTime(new Date(5))\n    .setClose(3000)\n    .setCloseValueTime(new Date(hourly+20))\n    .setTotal(7750)\n    .setMin(500)\n    .setMax(3000)\n    .setCount(6)\n    .build();\n\ndiff = expected.diff(dailyData.get(0));\ntest(diff.keySet().size() == 0,\n    diff.keySet() + \" fields are set incorrectly\");\n\nexpected = new Candlestick.Builder(x)\n    .setKey(\"TSLA\")\n    .setOpenTime(new Date(daily))\n    .setCloseTime(new Date(daily*2 - 1))\n    .setOpen(300)\n    .setOpenValueTime(new Date(daily+5))\n    .setClose(200)\n    .setCloseValueTime(new Date(daily+20))\n    .setTotal(600)\n    .setMin(100)\n    .setMax(300)\n    .setCount(3)\n    .build();\n\ndiff = expected.diff(dailyData.get(1));\ntest(diff.keySet().size() == 0,\n    diff.keySet() + \" fields are set incorrectly\");\n    \nprint(\"\");\nprint(\"Weekly data validation\");\n\nweeklyRm.doReduce();\n\nweeklyData = weeklyDAO.orderBy(Candlestick.OPEN_TIME).select().getArray();\ntest(weeklyData.size() == 1,\n    \"weekly DAO has expected number of items\");\n\nexpected = new Candlestick.Builder(x)\n    .setKey(\"TSLA\")\n    .setOpenTime(new Date(0))\n    .setCloseTime(new Date(weekly - 1))\n    .setOpen(500)\n    .setOpenValueTime(new Date(5))\n    .setClose(200)\n    .setCloseValueTime(new Date(daily+20))\n    .setTotal(8350)\n    .setMin(100)\n    .setMax(3000)\n    .setCount(9)\n    .build();\n\ndiff = expected.diff(weeklyData.get(0));\ntest(diff.keySet().size() == 0,\n    diff.keySet() + \" fields are set incorrectly\");\n\nprint(\"Done\");","output":"SUCCESS: Stock DAO has expected number of items\n\nHourly data validation\nSUCCESS: Hourly DAO has expected number of items\nSUCCESS: [] fields are set incorrectly\nSUCCESS: [] fields are set incorrectly\nSUCCESS: [] fields are set incorrectly\n\nDaily data validation\nSUCCESS: Daily DAO has expected number of items\nSUCCESS: [] fields are set incorrectly\nSUCCESS: [] fields are set incorrectly\n\nWeekly data validation\nSUCCESS: weekly DAO has expected number of items\nSUCCESS: [] fields are set incorrectly\nDone\n"})
p({"class":"foam.nanos.test.Test","passed":4,"failed":0,"id":"PlotTest","lastRun":"2019-05-03T02:50:41.133Z","lastDuration":3,"server":false,"status":2,"code":"var Candlestick = foam.nanos.analytics.Candlestick;\nvar dao = foam.dao.MDAO.create({of: Candlestick});\nPromise.all([\n    {\n        key: 'C1',\n        count: 1,\n        total: 100,\n        closeTime: new Date(0)\n    },\n    {\n        key: 'C1',\n        count: 1,\n        total: 200,\n        closeTime: new Date(5)\n    },\n    {\n        key: 'C2',\n        count: 1,\n        total: 100,\n        closeTime: new Date(0)\n    },\n    {\n        key: 'C1',\n        count: 1,\n        total: 190,\n        closeTime: new Date(3)\n    },\n].map(c => dao.put(Candlestick.create(c)))).then(function() {\n    var E = foam.mlang.ExpressionsSingleton.create();\n    return dao.orderBy(Candlestick.CLOSE_TIME).select(E.GROUP_BY(Candlestick.KEY, E.PLOT(Candlestick.CLOSE_TIME, Candlestick.AVERAGE)));\n}).then(function(sink) {\n    return Object.keys(sink.groups).map(key => ({\n        label: key,\n        data: sink.groups[key].data.map(arr => ({ x: arr[0], y: arr[1] }))\n    }));\n}).then(function(dataset) {\n    test(dataset.length == 2, 'dataset has 2 number of items');\n    test(dataset[0].data.length == 3, 'dataset[0].data has 3 items');\n    test(dataset[1].data.length == 1, 'dataset[1].data has 1 item');\n    test(dataset[0].data[1].y == 190, 'y value set properly');\n});","output":"SUCCESS: dataset has 2 number of items\nSUCCESS: dataset[0].data has 3 items\nSUCCESS: dataset[1].data has 1 item\nSUCCESS: y value set properly\n"})
p({"class":"foam.nanos.test.Test","passed":1,"failed":0,"id":"ValidateTest","lastRun":"2019-05-07T01:03:31.645Z","lastDuration":13,"status":1,"code":"valid = new foam.nanos.auth.Phone.Builder(x).setNumber(\"1231231234\").build();\nvalid.validate(x);\n\ninvalid = new foam.nanos.auth.Phone.Builder(x).setNumber(\"\").build();\nthrown = false;\ntry {\n    invalid.validate(x);\n} catch (Exception e) {\n    thrown = true;\n}\ntest(thrown, \"Thrown!\");","output":"SUCCESS: Thrown!\n"})
p({"class":"foam.nanos.auth.PreventDuplicateEmailDAOTest", "id":"PreventDuplicateEmailDAOTest"})
// Uncomment the line below when CRUNCH is mature enough to replace our current system.
// p({"class":"foam.nanos.crunch.crunchtest.CapabilityTest","id":"CapabilityTest","description":"test capability and junctions related"})
p({"class":"foam.nanos.test.Test","id":"FoldAndReduceTest","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"FoldAndReduceTest","passed":1,"failed":1,"lastRun":"2019-06-17T19:37:11.847Z","lastDuration":90,"status":1,"output":"SUCCESS: Stock DAO has expected number of items\n\nHourly data validation\nFAILURE: Sourced file: inline evaluation of: ``import foam.nanos.test.StockSnapshot; import foam.nanos.analytics.Candlestick; i . . . '' : No static field or inner class: OPEN_TIME of class foam.nanos.analytics.Candlestick\nSourced file: inline evaluation of: ``import foam.nanos.test.StockSnapshot; import foam.nanos.analytics.Candlestick; i . . . '' : No static field or inner class: OPEN_TIME of class foam.nanos.analytics.Candlestick : at Line: 96 : in file: inline evaluation of: ``import foam.nanos.test.StockSnapshot; import foam.nanos.analytics.Candlestick; i . . . '' : Candlestick .OPEN_TIME \n\n\tat bsh.UtilEvalError.toEvalError(UtilEvalError.java:79)\n\tat bsh.UtilEvalError.toEvalError(UtilEvalError.java:84)\n\tat bsh.BSHAmbiguousName.toObject(BSHAmbiguousName.java:58)\n\tat bsh.BSHAmbiguousName.toObject(BSHAmbiguousName.java:45)\n\tat bsh.BSHPrimaryExpression.eval(BSHPrimaryExpression.java:87)\n\tat bsh.BSHPrimaryExpression.eval(BSHPrimaryExpression.java:41)\n\tat bsh.BSHArguments.getArguments(BSHArguments.java:59)\n\tat bsh.BSHMethodInvocation.eval(BSHMethodInvocation.java:63)\n\tat bsh.BSHPrimarySuffix.doSuffix(BSHPrimarySuffix.java:97)\n\tat bsh.BSHPrimaryExpression.eval(BSHPrimaryExpression.java:74)\n\tat bsh.BSHPrimaryExpression.eval(BSHPrimaryExpression.java:41)\n\tat bsh.BSHAssignment.eval(BSHAssignment.java:71)\n\tat bsh.Interpreter.eval(Interpreter.java:659)\n\tat bsh.Interpreter.eval(Interpreter.java:750)\n\tat bsh.Interpreter.eval(Interpreter.java:739)\n\tat foam.nanos.test.Test.runScript(Test.java:274)\n\tat foam.nanos.script.ScriptRunnerDAO$1.execute(ScriptRunnerDAO.java:59)\n\tat foam.nanos.pool.FixedThreadPool$ContextAgentRunnable.run(FixedThreadPool.java:42)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"})
p({"class":"foam.nanos.test.Test","id":"FoldAndReduceTest","status":2,"code":"import foam.nanos.test.StockSnapshot;\nimport foam.nanos.analytics.Candlestick;\nimport static foam.mlang.MLang.*;\n\n// Setup:\n\nhourly = 60 * 60 * 1000;\ndaily = 24 * 60 * 60 * 1000;\nweekly = 7 * 24 * 60 * 60 * 1000;\n\nhourlyDAO = new foam.dao.MDAO(Candlestick.getOwnClassInfo());\ndailyDAO = new foam.dao.MDAO(Candlestick.getOwnClassInfo());\nweeklyDAO = new foam.dao.MDAO(Candlestick.getOwnClassInfo());\n\nfm = new foam.nanos.analytics.DAOFoldManager.Builder(x)\n    .setDao(hourlyDAO)\n    .setPeriodLengthMs(hourly)\n    .build();\n\nstockDAO = new foam.nanos.analytics.FoldManagerDAODecorator.Builder(x)\n    .setDelegate(new foam.dao.MDAO(StockSnapshot.getOwnClassInfo()))\n    .setFm(fm)\n    .build();\n\ndailyRm = new foam.nanos.analytics.DAOReduceManager.Builder(x)\n    .setSourceDAO(hourlyDAO)\n    .setDestDAO(dailyDAO)\n    .setPeriodLengthMs(daily)\n    .build();\n\nweeklyRm = new foam.nanos.analytics.DAOReduceManager.Builder(x)\n    .setSourceDAO(dailyDAO)\n    .setDestDAO(weeklyDAO)\n    .setPeriodLengthMs(weekly)\n    .build();\n    \n// Test data:\n    \n// First hour.\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(5))\n    .setPrice(500)\n    .build());\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(10))\n    .setPrice(650)\n    .build());\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(20))\n    .setPrice(600)\n    .build());\n\n// Second hour.\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(hourly + 5))\n    .setPrice(1000)\n    .build());\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(hourly + 10))\n    .setPrice(2000)\n    .build());\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(hourly + 20))\n    .setPrice(3000)\n    .build());\n\n// Second day.\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(daily + 5))\n    .setPrice(300)\n    .build());\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(daily+ 10))\n    .setPrice(100)\n    .build());\nstockDAO.put(new StockSnapshot.Builder(x)\n    .setSymbol(\"TSLA\")\n    .setTime(new Date(daily + 20))\n    .setPrice(200)\n    .build());\n\ntest(stockDAO.select(COUNT()).getValue() == 9,\n    \"Stock DAO has expected number of items\");\n    \nprint(\"\");\nprint(\"Hourly data validation\");\n\nhourlyData = hourlyDAO.orderBy(Candlestick.OPEN_VALUE_TIME).select().getArray();\ntest(hourlyData.size() == 3,\n    \"Hourly DAO has expected number of items\");\n\nexpected = new Candlestick.Builder(x)\n    .setKey(\"TSLA\")\n    .setCloseTime(new Date(hourly - 1))\n    .setOpen(500)\n    .setOpenValueTime(new Date(5))\n    .setClose(600)\n    .setCloseValueTime(new Date(20))\n    .setTotal(1750)\n    .setMin(500)\n    .setMax(650)\n    .setCount(3)\n    .build();\n\ndiff = expected.diff(hourlyData.get(0));\ntest(diff.keySet().size() == 0,\n    diff.keySet() + \" fields are set incorrectly\");\n\nexpected = new Candlestick.Builder(x)\n    .setKey(\"TSLA\")\n    .setCloseTime(new Date(hourly*2 - 1))\n    .setOpen(1000)\n    .setOpenValueTime(new Date(hourly+5))\n    .setClose(3000)\n    .setCloseValueTime(new Date(hourly+20))\n    .setTotal(6000)\n    .setMin(1000)\n    .setMax(3000)\n    .setCount(3)\n    .build();\n\ndiff = expected.diff(hourlyData.get(1));\ntest(diff.keySet().size() == 0,\n    diff.keySet() + \" fields are set incorrectly\");\n\nexpected = new Candlestick.Builder(x)\n    .setKey(\"TSLA\")\n    .setCloseTime(new Date(daily + hourly - 1))\n    .setOpen(300)\n    .setOpenValueTime(new Date(daily+5))\n    .setClose(200)\n    .setCloseValueTime(new Date(daily+20))\n    .setTotal(600)\n    .setMin(100)\n    .setMax(300)\n    .setCount(3)\n    .build();\n\ndiff = expected.diff(hourlyData.get(2));\ntest(diff.keySet().size() == 0,\n    diff.keySet() + \" fields are set incorrectly\");\n    \nprint(\"\");\nprint(\"Daily data validation\");\n\ndailyRm.doReduce();\n\ndailyData = dailyDAO.orderBy(Candlestick.OPEN_VALUE_TIME).select().getArray();\ntest(dailyData.size() == 2,\n    \"Daily DAO has expected number of items\");\n\nexpected = new Candlestick.Builder(x)\n    .setKey(\"TSLA\")\n    .setCloseTime(new Date(daily - 1))\n    .setOpen(500)\n    .setOpenValueTime(new Date(5))\n    .setClose(3000)\n    .setCloseValueTime(new Date(hourly+20))\n    .setTotal(7750)\n    .setMin(500)\n    .setMax(3000)\n    .setCount(6)\n    .build();\n\ndiff = expected.diff(dailyData.get(0));\ntest(diff.keySet().size() == 0,\n    diff.keySet() + \" fields are set incorrectly\");\n\nexpected = new Candlestick.Builder(x)\n    .setKey(\"TSLA\")\n    .setCloseTime(new Date(daily*2 - 1))\n    .setOpen(300)\n    .setOpenValueTime(new Date(daily+5))\n    .setClose(200)\n    .setCloseValueTime(new Date(daily+20))\n    .setTotal(600)\n    .setMin(100)\n    .setMax(300)\n    .setCount(3)\n    .build();\n\ndiff = expected.diff(dailyData.get(1));\ntest(diff.keySet().size() == 0,\n    diff.keySet() + \" fields are set incorrectly\");\n    \nprint(\"\");\nprint(\"Weekly data validation\");\n\nweeklyRm.doReduce();\n\nweeklyData = weeklyDAO.orderBy(Candlestick.OPEN_VALUE_TIME).select().getArray();\ntest(weeklyData.size() == 1,\n    \"weekly DAO has expected number of items\");\n\nexpected = new Candlestick.Builder(x)\n    .setKey(\"TSLA\")\n    .setCloseTime(new Date(weekly - 1))\n    .setOpen(500)\n    .setOpenValueTime(new Date(5))\n    .setClose(200)\n    .setCloseValueTime(new Date(daily+20))\n    .setTotal(8350)\n    .setMin(100)\n    .setMax(3000)\n    .setCount(9)\n    .build();\n\ndiff = expected.diff(weeklyData.get(0));\ntest(diff.keySet().size() == 0,\n    diff.keySet() + \" fields are set incorrectly\");\n\nprint(\"Done\");","output":""})
p({"class":"foam.nanos.test.Test","id":"FoldAndReduceTest","passed":10,"failed":0,"lastRun":"2019-06-17T19:39:02.373Z","lastDuration":80,"status":1,"output":"SUCCESS: Stock DAO has expected number of items\n\nHourly data validation\nSUCCESS: Hourly DAO has expected number of items\nSUCCESS: [] fields are set incorrectly\nSUCCESS: [] fields are set incorrectly\nSUCCESS: [] fields are set incorrectly\n\nDaily data validation\nSUCCESS: Daily DAO has expected number of items\nSUCCESS: [] fields are set incorrectly\nSUCCESS: [] fields are set incorrectly\n\nWeekly data validation\nSUCCESS: weekly DAO has expected number of items\nSUCCESS: [] fields are set incorrectly\nDone\n"})
p({"class":"foam.nanos.test.Test","id":"FoldAndReduceTest","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"FoldAndReduceTest","lastRun":"2019-06-17T19:39:12.053Z","lastDuration":57,"status":1,"output":"SUCCESS: Stock DAO has expected number of items\n\nHourly data validation\nSUCCESS: Hourly DAO has expected number of items\nSUCCESS: [] fields are set incorrectly\nSUCCESS: [] fields are set incorrectly\nSUCCESS: [] fields are set incorrectly\n\nDaily data validation\nSUCCESS: Daily DAO has expected number of items\nSUCCESS: [] fields are set incorrectly\nSUCCESS: [] fields are set incorrectly\n\nWeekly data validation\nSUCCESS: weekly DAO has expected number of items\nSUCCESS: [] fields are set incorrectly\nDone\n"})
p({
  "class":"foam.nanos.test.Test",
  "id":"Multi Line Output",
  "status":2,
  "code":
  """
    home = System.getProperty("JOURNAL_HOME");
    file = java.io.File.createTempFile(\"temp\", null, new java.io.File(home));
    file.deleteOnExit();
    outputter = new foam.lib.json.Outputter(x, file);
    string = \"\\\\\\t line1 \\n   \\\\n  \\n line2 \\n line3 \\\" \\\\ \";
    user = new foam.nanos.auth.User(x);
    user.setId(24);
    user.setFirstName(string);
    user.setLastName(\"Fjorenborenborkenberger\");
    outputter.setMultiLine(true);
    outputter.outputJSONJFObject((foam.core.FObject) user);
    outputter.flush();
    filejournal = new foam.dao.FileJournal(x);
    filejournal.setMultiLineOutput(true);
    filejournal.setFilename(file.getName());
    firstread = filejournal.getEntry(filejournal.getReader());
    firstread = firstread.substring(2, firstread.length() - 1);
    parser = new foam.lib.json.JSONParser();
    firstparse = parser.parseString(firstread);
    outputter.outputJSONJFObject((foam.core.FObject) firstparse);
    secondread = filejournal.getEntry(filejournal.getReader());
    secondread = secondread.substring(2, secondread.length() - 1);
    test(firstread.equals(secondread), \"Reparsing preserves JSON\");
  """,
  "output":""
})
