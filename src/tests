p({"class":"foam.nanos.test.Test","id":"password hashing","description":"testing password hashing dao","server":true,"scheduled":false,"code":"auth = x.get(\"auth\");\nuserDAO = x.get(\"userDAO\");\n\n// test password hashing\nuser = new foam.nanos.auth.User();\nuser.setFirstName(\"Test\");\nuser.setLastName(\"MintChip\");\nuser.setEmail(\"test@nanopay.net\");\nuser.setPassword(\"Mintchip123\");\nresult = userDAO.put(user);\n\ntest(foam.util.SafetyUtil.isEmpty(result.getPassword()), \"password not returned following first put\");\ntest(auth.loginByEmail(x, \"test@nanopay.net\", \"Mintchip123\") != null, \"login using email and password\");\n\nresult.setPassword(\"Mintchip124\");\nresult2 = userDAO.put(result);\n\ntry {\ntest(foam.util.SafetyUtil.isEmpty(result2.getPassword()), \"password not returned following second put\");\nauth.loginByEmail(x, \"test@nanopay.net\", \"Mintchip124\");\n} catch (Throwable t) {\ntest(t.getMessage() == \"Invalid password\", \"password not updated\");\n}"})
p({"class":"foam.nanos.test.Test","id":"MDAO test","description":"MDAO test","server":true,"scheduled":false,"code":"mdao = new foam.dao.MDAO(foam.nanos.auth.Country.getOwnClassInfo());\nmdao.addIndex(foam.nanos.auth.Country.CODE); \ncountry = new foam.nanos.auth.Country();\ncountry.setCode(\"CN\");\ncountry.setName(\"CHINA\");\nmdao.put(country);\ncountry = country.fclone();\ncountry.setCode(\"CA\");\ncountry.setName(\"CANADA\");\nmdao.put(country);\ncountry = country.fclone();\ncountry.setCode(\"USA\");\ncountry.setName(\"United States of America\");\nmdao.put(country);\nresult = mdao.find(\"CA\");\ntest(result.getName().equals(\"CANADA\"),\"test if country name of CA is CANADA?\");\nresult = mdao.find(\"CAD\");\ntest(result==null,\"test if country name of CAD not found?\");","output":"SUCCESS: test if country name of CA is CANADA?\nSUCCESS: test if country name of CAD not found?\n","notes":""})
p({"class":"foam.nanos.test.Test","id":"MapDAOTest","description":"MapDAOTest","server":true,"scheduled":false,"code":"mdao = new foam.dao.MapDAO(foam.nanos.auth.Country.getOwnClassInfo());\ncountry  = new foam.nanos.auth.Country();\ncountry.setCode(\"CN\");\ncountry.setName(\"CHINA\");\nmdao.put(country);\ncountry=country.fclone();\ncountry.setCode(\"CN2\");\ncountry.setName(\"CHINA2\");\nmdao.put(country);\nresult = mdao.find(\"CN\");\ntest(result.getName().equals(\"CHINA\"),\"test if country name of CN is CHINA?\");\nresult = mdao.find(\"CAD\");\ntest(result==null,\"test if country name of CAD not found?\");\n\n","notes":""})
p({"class":"foam.nanos.test.Test","id":"PersistedIndex test","description":"tests the persisted index feature","server":true,"scheduled":false,"code":"index = new foam.dao.index.TreeIndex(foam.nanos.auth.Country.CODE);\npindex = new foam.dao.index.PersistedIndex(\"testindex\", index);\ntest(pindex.wrap(\"hello world\") == 0, \"position is 0\");\ntest(pindex.wrap(\"test123\") == 18, \"position is 18\");\ntest(\"hello world\".equals(pindex.unwrap((long) 0)), \"state is hello world\");\ntest(\"test123\".equals(pindex.unwrap((long) 18)), \"state is test123\");","notes":""})
p({"class":"foam.nanos.test.Test","id":"Transaction benchmark","description":"Performs transaction benchmark tests","lastDuration":0,"server":true,"scheduled":false,"code":"import foam.nanos.bench.*;\n\nrunner = new BenchmarkRunner.Builder(x)\n.setThreadCount(100)\n.setInvocationCount(1)\n.setBenchmark(new TransactionBenchmark())\n.build();\n\nrunner.execute(x);\n","output":"","notes":""})
p({"class":"foam.nanos.test.Test","id":"Relationship Test","description":"Tests behaviour of relationships from Java","lastRun":"2018-02-13T17:21:26.173Z","lastDuration":28,"code":"foam.core.X x = foam.core.EmptyX.instance();\n\nx = x.put(\"courseDAO\", new foam.dao.EasyDAO.Builder(x).\nsetContextualize(true).\nsetOf(foam.nanos.demo.relationship.Course.getOwnClassInfo()).\nbuild());\n\nx = x.put(\"professorDAO\", new foam.dao.EasyDAO.Builder(x).\nsetGuid(true).\nsetContextualize(true).\nsetOf(foam.nanos.demo.relationship.Professor.getOwnClassInfo()).\nbuild());\nx = x.put(\"studentDAO\", new foam.dao.EasyDAO.Builder(x).\nsetContextualize(true).\nsetSeqNo(true).\nsetOf(foam.nanos.demo.relationship.Student.getOwnClassInfo()).\nbuild());\n\nx = x.put(\"studentCourseJunctionDAO\", new foam.dao.EasyDAO.Builder(x).\nsetContextualize(true).\nsetOf(foam.nanos.demo.relationship.StudentCourseJunction.getOwnClassInfo()).\nbuild());\n\nfoam.dao.DAO studentDAO               = ((foam.dao.DAO)x.get(\"studentDAO\")).inX(x);\nfoam.dao.DAO courseDAO                = ((foam.dao.DAO)x.get(\"courseDAO\")).inX(x);\nfoam.dao.DAO professorDAO             = ((foam.dao.DAO)x.get(\"professorDAO\")).inX(x);\nfoam.dao.DAO studentCourseJunctionDAO = ((foam.dao.DAO)x.get(\"studentCourseJunctionDAO\")).inX(x);\n\nstudentDAO.put(new foam.nanos.demo.relationship.Student.Builder(x).\nsetName(\"Adam\").\nbuild());\n\nstudentDAO.put(new foam.nanos.demo.relationship.Student.Builder(x).\nsetName(\"Mike\").\nbuild());\n\ncourseDAO.put(new foam.nanos.demo.relationship.Course.Builder(x).\nsetCode(\"CS 101\").\nsetTitle(\"Intro to computer science\").\nbuild());\n\ncourseDAO.put(new foam.nanos.demo.relationship.Course.Builder(x).\nsetCode(\"CS 201\").\nsetTitle(\"Intro to computer science II\").\nbuild());\n\nfoam.nanos.demo.relationship.Professor donald =\n(foam.nanos.demo.relationship.Professor) professorDAO.put(new foam.nanos.demo.relationship.Professor.Builder(x).\nsetName(\"Donald Knuth\").\nbuild());\n\nfoam.nanos.demo.relationship.Professor alan =\n(foam.nanos.demo.relationship.Professor)professorDAO.put(new foam.nanos.demo.relationship.Professor.Builder(x).\nsetName(\"Alan Kay\").\nbuild());\n\n\n\nfoam.nanos.demo.relationship.Student adam = (foam.nanos.demo.relationship.Student)studentDAO.find(0L);\nfoam.nanos.demo.relationship.Student mike = (foam.nanos.demo.relationship.Student)studentDAO.find(1L);\n\nfoam.nanos.demo.relationship.Course cs101 = (foam.nanos.demo.relationship.Course)courseDAO.find(\"CS 101\");\nfoam.nanos.demo.relationship.Course cs201 = (foam.nanos.demo.relationship.Course)courseDAO.find(\"CS 201\");\n\n// Assign professors\n// TODO: should we support .add()/.remove() for 1:* relationships as\n// well?\ndonald.getCourses().put(cs101);\nalan.getCourses().put(cs201);\n\n// Enroll students\ncs101.getStudents().add(adam);\nmike.getCourses().add(cs201);\n\nfoam.nanos.demo.relationship.Course course = cs101;\n\nprint(\"\");\nprint(\"**** \" + course.getCode() + \" ****\");\nprint(\"Instructor: \" + ((foam.nanos.demo.relationship.Professor)((foam.dao.DAO)x.get(\"professorDAO\")).find(course.getProfessor())).getName());\nprint(\"\");\nprint(\"*** Students ***\");\nprint(\"\");\n\nfoam.dao.ListSink sink = (foam.dao.ListSink)course.getStudents().getDAO().select(null);\njava.util.Iterator i = sink.getData().iterator();\n\nwhile ( i.hasNext() ) {\nfoam.nanos.demo.relationship.Student student = (foam.nanos.demo.relationship.Student)i.next();\nprint(student.getName());\n}\n\n\ncourse = cs201;\n\nprint(\"\");\nprint(\"**** \" + course.getCode() + \" ****\");\nprint(\"Instructor: \" + ((foam.nanos.demo.relationship.Professor)((foam.dao.DAO)x.get(\"professorDAO\")).find(course.getProfessor())).getName());\nprint(\"\");\nprint(\"*** Students ***\");\nprint(\"\");\n\nsink = (foam.dao.ListSink)course.getStudents().getDAO().select(null);\ni = sink.getData().iterator();\n\nwhile ( i.hasNext() ) {\nfoam.nanos.demo.relationship.Student student = (foam.nanos.demo.relationship.Student)i.next();\nprint(student.getName());\n}","output":"\n**** CS 101 ****\nInstructor: Donald Knuth\n\n*** Students ***\n\nAdam\n\n**** CS 201 ****\nInstructor: Alan Kay\n\n*** Students ***\n\nMike\n"})
p({"class":"foam.nanos.test.Test","id":"Freeze test","code":"foam.nanos.demo.relationship.Professor prof = new foam.nanos.demo.relationship.Professor();\n\nprof.setName(\"Adam\");\n\nprint(\"Name is: \" + prof.getName());\nprint(\"Freezing object.\");\n\nprof.freeze();\n\nboolean exceptionThrown = false;\n\ntry {\n  prof.setName(\"Bob\");\n} catch ( UnsupportedOperationException ex ) {\n  exceptionThrown = true;\n}\n\ntest(exceptionThrown, \"Prevented setting property of frozen object.\");\ntest(prof.getName().equals(\"Adam\"), \"Name is still Adam\");\n\nfoam.nanos.demo.relationship.Professor prof2 = prof.fclone();\n\nprint(\"Unfreezing object via cloning\");\n\nprint(\"Name was: \" + prof2.getName());\n\nprof2.setName(\"Bob\");\n\nprint(\"Name is now: \" + prof2.getName());\n\nfoam.core.X x = foam.core.EmptyX.instance();\n\nx = x.put(\"professorDAO\", new foam.dao.EasyDAO.Builder(x).\nsetGuid(true).\nsetContextualize(true).\nsetAuthenticate(false).\nsetOf(foam.nanos.demo.relationship.Professor.getOwnClassInfo()).\nbuild());\n\nfoam.dao.DAO professorDAO = ((foam.dao.DAO)x.get(\"professorDAO\"));\n\nprofessorDAO.put(prof2);\n\nfoam.dao.ArraySink sink = (foam.dao.ArraySink)professorDAO.select();\n\nprof = (foam.nanos.demo.relationship.Professor)sink.getArray().get(0);\n\nprint(\"Testing if object from DAO is frozen.\");\n\nString name1 = prof.getName();\n\nprint(\"Name is: \" + prof.getName());\n\nexceptionThrown = false;\n\ntry {\n  prof.setName(\"John\");\n} catch ( UnsupportedOperationException ex ) {\n  exceptionThrown = true;\n}\n\ntest(exceptionThrown, \"Prevented setting property of frozen object.\");\ntest(prof.getName().equals(name1), \"Name is still \" + name1);\n"})
