/**
 * @license
 * Copyright 2019 The FOAM Authors. All Rights Reserved.
 * http://www.apache.org/licenses/LICENSE-2.0
 */

foam.CLASS({
  package: 'foam.u2.filter',
  name: 'DateFilterView',
  extends: 'foam.u2.Controller',

  documentation: `A SearchView for properties of type Date.`,

  implements: [
    'foam.mlang.Expressions'
  ],

  css: `
    ^ {
      padding: 24px 16px;
      box-sizing: border-box;
      min-width: 214px;
    }

    ^ .foam-u2-tag-Select {
      width: 100%;
      height: 36px;

      border-radius: 3px;
      border: solid 1px #cbcfd4;
      background-color: #ffffff;
    }

    ^ .foam-u2-DateView {
      width: 100%;
      height: 36px;

      margin-top: 16px;

      border-radius: 3px;
      border: solid 1px #cbcfd4;
      background-color: #ffffff;
    }
  `,

  properties: [
    {
      name: 'property',
      documentation: `The property that this view is filtering by. Should be of
          type Date.`,
      required: true
    },
    {
      class: 'String',
      name: 'qualifier',
      documentation: `Lets the user choose a predicate to filter the view by.`,
      view: {
        class: 'foam.u2.view.ChoiceView',
        choices: [
          ['True', 'All Time'],
          ['Gt', 'After'],
          ['Lt', 'Before'],
          ['Bt', 'Between']
        ],
        defaultValue: 'True'
      }
    },
    {
      class: 'Date',
      name: 'date1',
      documentation: `A date selectable by the user. Used as the second argument
          to the predicate generated by this view.`,
    },
    {
      class: 'Date',
      name: 'date2',
      documentation: `A date selectable by the user. Used as the second argument
          to the predicate generated by this view.`,
    },
    {
      name: 'predicate',
      documentation: `All SearchViews must have a predicate as required by the
          SearchManager. The SearchManager will read this predicate and use it
          to filter the dao being displayed in the view.`,
      expression: function(qualifier, date1, date2) {
        if ( ! qualifier || ! date1 || isNaN(date1.valueOf()) ) return this.TRUE;

        if ( qualifier !== 'Bt' ) {
          return foam.mlang.predicate[qualifier].create({
            arg1: this.property,
            arg2: date1
          });
        }

        return this.AND(this.GT(this.property, date1), this.LT(this.property, date2));
      }
    },
    {
      name: 'name',
      documentation: `Required by SearchManager.`,
      value: 'currency search view'
    }
  ],

  methods: [
    function initE() {
      var self = this;
      this
        .addClass(this.myClass())
        .start(this.QUALIFIER)
          .start('div').addClass(this.myClass('carrot')).end()
        .end()
        .add(this.slot(function(qualifier) {
          if ( ! qualifier ) return this.E();
          return qualifier === 'Bt' ?
            this.E().add(self.DATE1).add(self.DATE2) :
            this.E().add(self.DATE1);
        }));
    },

    /**
     * Clears the fields to their default values.
     * Required on all SearchViews. Called by ReciprocalSearch.
     */
    function clear() {
      this.qualifier = 'True';
    }
  ]
});
