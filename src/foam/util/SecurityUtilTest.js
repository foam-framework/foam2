/**
 * @license
 * Copyright 2018 The FOAM Authors. All Rights Reserved.
 * http://www.apache.org/licenses/LICENSE-2.0
 */

foam.CLASS({
  package: 'foam.util',
  name: 'SecurityUtilTest',
  extends: 'foam.nanos.test.Test',

  javaImports: [
    'java.math.BigInteger',
    'java.security.AlgorithmParameters',
    'java.security.KeyFactory',
    'java.security.PublicKey',
    'java.security.spec.*',
  ],

  constants: [
    { type: 'String', name: 'DSA_MD5',       value: 'MD5:43:97:1c:aa:f8:ba:1a:8f:20:b7:27:9a:40:94:b3:f6' },
    { type: 'String', name: 'DSA_SHA1',      value: 'SHA1:7xSlLFBn7ZC51vEd2EZEFv3RQhs' },
    { type: 'String', name: 'DSA_SHA256',    value: 'SHA256:bPwHkmzpJXRc/R1prQR0ZsKh3q86jpUWWoK6GMw2SRM' },
    { type: 'String', name: 'RSA_MD5',       value: 'MD5:73:2d:4b:2c:59:37:d2:ac:36:19:2d:d9:da:91:12:3d' },
    { type: 'String', name: 'RSA_SHA1',      value: 'SHA1:fa0C/aP0RS8yBboDD8CPTLxwdzk' },
    { type: 'String', name: 'RSA_SHA256',    value: 'SHA256:vaLx6BKF2YLID22PTiUAufKhmHB4Mfq3ewLTdF3rhLE' },
    { type: 'String', name: 'EC_256_MD5',    value: 'MD5:21:e3:ad:fb:f9:15:69:1e:63:1c:15:91:64:e3:59:10' },
    { type: 'String', name: 'EC_256_SHA1',   value: 'SHA1:PDwtkaOhM6sNak3QHL1HjeSEW+o' },
    { type: 'String', name: 'EC_256_SHA256', value: 'SHA256:nBapDbPxvU/9kOg9yoOc8MEgq/U7bUmo5c8gL4CzX5E' },
    { type: 'String', name: 'EC_384_MD5',    value: 'MD5:0d:d0:d2:e5:80:cb:44:7f:41:b0:cf:7e:c5:78:10:b9' },
    { type: 'String', name: 'EC_384_SHA1',   value: 'SHA1:DS3tKzzvtT1ufBVFGAt7xZIhH90' },
    { type: 'String', name: 'EC_384_SHA256', value: 'SHA256:Y6WV/e/H5Fz3ZUkJnsh0i2rw5/oJ9F3/PG5CNr5SSBY' },
    { type: 'String', name: 'EC_521_MD5',    value: 'MD5:87:dd:44:f5:b7:9c:5e:f5:07:24:5f:e4:f6:72:8e:aa' },
    { type: 'String', name: 'EC_521_SHA1',   value: 'SHA1:3thS3QfijLyQxvSgfmW0DEBW9s0' },
    { type: 'String', name: 'EC_521_SHA256', value: 'SHA256:mC+U1T2p0Fzq5FmOHUgJ/ofA/MoNkcDWynTnxfrJghw' }
  ],

  methods: [
    {
      name: 'runTest',
      javaCode: `
        SecurityUtil_GenerateSSHKeyFingerprint_DSAPublicKey_1024();
        SecurityUtil_GenerateSSHKeyFingerprint_RSAPublicKey_4096();
        SecurityUtil_GenerateSSHKeyFingerprint_ECPublicKey_256();
        SecurityUtil_GenerateSSHKeyFingerprint_ECPublicKey_384();
        SecurityUtil_GenerateSSHKeyFingerprint_ECPublicKey_521();
      `
    },
    {
      name: 'SecurityUtil_GenerateSSHKeyFingerprint_DSAPublicKey_1024',
      javaCode: `
        try {
          // re-generate public key
          KeyFactory kf = KeyFactory.getInstance("DSA");
          BigInteger y = new BigInteger("4EB4F0085BA8CA56A6B617D15F093F0C2F79AC3B663010E270A4373B72BE861ECA6F58EA442902148C25ECEEFDED1D3F3AA3936C0AC830F966905B3817964729CA9CE354F39797999CBFD44D0CCB7B4B9A5C522907A1D1F880FEA3C8156AC8E9D15F58055C89EF86AAA9841357356EB43D9682844948EECD8C96F03129CD7E72", 16);
          BigInteger p = new BigInteger("00F9922757028BCB1AE0F1F99687FDEFD1FDFEBC404CFC43ABCACDE902AAFA67ED8758D71921466CD57CF88FFC2A42111B862F6DE75DF9D7D88A6CC004D764F35DFDFE8211D2241D90B0225905311704704A94562503144D960C1DDD04D199E25648BF7EDF80D5FDB59D5A134D827DCB82C512BC7F23D52452C6E9EEDA610C4D71", 16);
          BigInteger q = new BigInteger("00D0F01E0B8F413F45ED4A5ADFE35ADE69CE8F6223", 16);
          BigInteger g = new BigInteger("376D50760A0DAE91863C1D74602EE05E0B2EBD9C7CEC460CCD55109CE6C6A64C0A08C9B0A067A92D86FC5AB18BCA4C2409D9B8C881D7F02861400A8BFAD0316BCAFD7032F41B5421E8A336EC0DBBAC9B73DD7CB20C2A631B4526B046175CA3480743151F50F57C19DF305819E4DC73B0B55D15FE8F50187B95FC3B5BB48EA3E2", 16);
          PublicKey publicKey = kf.generatePublic(new DSAPublicKeySpec(y, p, q, g));

          // verify fingerprints generated by ssh-keygen match fingerprints generated by helper function
          test(DSA_MD5.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("MD5", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using a DSA public key and MD5");
          test(DSA_SHA1.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("SHA-1", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using a DSA public key and SHA-1");
          test(DSA_SHA256.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("SHA-256", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using a DSA public key and SHA-256");
        } catch ( Throwable t ) {
          test(false, "Generating SSH key fingerprint for DSAPublicKey should not throw an exception");
        }
      `
    },
    {
      name: 'SecurityUtil_GenerateSSHKeyFingerprint_RSAPublicKey_4096',
      javaCode: `
        try {
          // re-generate public key
          KeyFactory kf = KeyFactory.getInstance("RSA");
          BigInteger mod = new BigInteger("00CF1FD94800C0C6DF6C45EBC8C8EA5834DD551B533C0B2442799ED865E6636BB015F8000D3C656F56E83B3D70204CEC18A88A33404B9458C538FE6C5D7F45567A650B9AA5D57BD3CA351A874617A78622B3BC63BB2385E0AC0BC5576C08BBCA56927A8E73386B15C2AD5B09D24397955E5D69ED590FA4FC5D2CEA092E353F8ADBBC33DCAF1E480ED6589AA06AD03D9F245270FD649CAC02F8CFDECCB1B3B4C6890C4EBA71FC2DB96A6269266C66F3E8EA4BA414F6EA5A1F321763DBC5D007B0216D2751B22869EBE8ACFF034E0A633539762DB5FEAA740362101EA6BF2B94D3A47CA58511F912114D94FC94C406AD2BDDF49BDDD6D8AE807789A1235C10B21B6E42DE088B88E157E03245EC75472C366FBFF7AAA384CAA3565EEBEEC854905BB77F74FC38EF6B5457E772A33FD3E49B86AA13A7E434D40AA47BE9EF62BE5E5BA3566BD5DB0148B95ECE1F7B2D83F1B956D0956E9B36D582B3B2FFA6B5ABB93CDBEF68DFCB3BB482127A044533D66DC753252A6E3E037105AF06F3D5078E67929065AFD728A0CB15A28EFB982C0585D91A4D4D6B7FBFB42CF39A8FFC9666825D7942C55F7FD4479CD40F0685D8DB98707D85C5AD0E4E229858664C72D03CFCC56AF9F2F34DA813D39740F1A55B9A21C581B67F3D30E53B59D0A05F73ADE872F22EEA83949E60DAFFA0A39FDC68BABDA0F05BC364CCA8E05464751FE1C9F7613EC1", 16);
          BigInteger pubExp = new BigInteger("010001", 16);
          PublicKey publicKey = kf.generatePublic(new RSAPublicKeySpec(mod, pubExp));

          // verify fingerprints generated by ssh-keygen match fingerprints generated by helper function
          test(RSA_MD5.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("MD5", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using an RSA public key and MD5");
          test(RSA_SHA1.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("SHA-1", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using an RSA public key and SHA-1");
          test(RSA_SHA256.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("SHA-256", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using an RSA public key and SHA-256");
        } catch ( Throwable t ) {
          test(false, "Generating SSH key fingerprint for RSAPublicKey should not throw an exception");
        }
      `
    },
    {
      name: 'SecurityUtil_GenerateSSHKeyFingerprint_ECPublicKey_256',
      javaCode: `
        try {
          // re-generate public key
          KeyFactory kf = KeyFactory.getInstance("EC");

          // get q
          BigInteger x = new BigInteger("8A2E6AF7986E09B3722E04F8035816470EDE13F8733D4ECAFE895C520EC5E269", 16);
          BigInteger y = new BigInteger("320606140ECC616FA957C5A58EF429E3E923E3ECFF0BF602E27D7D9D2894767F", 16);
          ECPoint w = new ECPoint(x, y);

          // get ec parameter spec
          AlgorithmParameters params = AlgorithmParameters.getInstance("EC");
          params.init(new ECGenParameterSpec("secp256r1"));
          ECPublicKeySpec spec = new ECPublicKeySpec(w, params.getParameterSpec(ECParameterSpec.class));

          PublicKey publicKey = kf.generatePublic(spec);

          // verify fingerprints generated by ssh-keygen match fingerprints generated by helper function
          test(EC_256_MD5.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("MD5", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using an EC public key and MD5");
          test(EC_256_SHA1.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("SHA-1", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using an EC public key and SHA-1");
          test(EC_256_SHA256.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("SHA-256", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using an EC public key and SHA-256");
        } catch ( Throwable t ) {
          test(false, "Generating SSH key fingerprint for ECPublicKey should not throw an exception");
        }
      `
    },
    {
      name: 'SecurityUtil_GenerateSSHKeyFingerprint_ECPublicKey_384',
      javaCode: `
        try {
          // re-generate public key
          KeyFactory kf = KeyFactory.getInstance("EC");

          // get q
          BigInteger x = new BigInteger("F0755E5659E05E403D986F971160E59C44AEEC3BD9F2D4E72F8186D2B89CBB5CBB94FA159705A4892A639EAAD6B9B767", 16);
          BigInteger y = new BigInteger("B40A5B0CF9988F1EC71B9FEC3D6279ACC466751805799F2CB792D2D5CC00B31C008764E8CCBE4140B4DCCE3BF007644E", 16);
          ECPoint w = new ECPoint(x, y);

          // get ec parameter spec
          AlgorithmParameters params = AlgorithmParameters.getInstance("EC");
          params.init(new ECGenParameterSpec("secp384r1"));
          ECPublicKeySpec spec = new ECPublicKeySpec(w, params.getParameterSpec(ECParameterSpec.class));

          PublicKey publicKey = kf.generatePublic(spec);

          // verify fingerprints generated by ssh-keygen match fingerprints generated by helper function
          test(EC_384_MD5.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("MD5", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using an EC public key and MD5");
          test(EC_384_SHA1.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("SHA-1", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using an EC public key and SHA-1");
          test(EC_384_SHA256.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("SHA-256", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using an EC public key and SHA-256");
        } catch ( Throwable t ) {
          test(false, "Generating SSH key fingerprint for ECPublicKey should not throw an exception");
        }
      `
    },
    {
      name: 'SecurityUtil_GenerateSSHKeyFingerprint_ECPublicKey_521',
      javaCode: `
        try {
          // re-generate public key
          KeyFactory kf = KeyFactory.getInstance("EC");

          // get q
          BigInteger x = new BigInteger("001E235DCBB215503431085920D617EAED9EFF5D8E9C64DE9760E5DBFC5084302A7427008C9B4544A6DC892A2BE2A55302D9F00A775976918B4B1669C5B347864A5E", 16);
          BigInteger y = new BigInteger("00057609379054941916AF1F9036863238C45117666CE9F42305252538E010DB7011863BBAD2C79FFF35CA56465A6BA0427E59E5A43B1BE364CB691CF6A06684C0CA", 16);
          ECPoint w = new ECPoint(x, y);

          // get ec parameter spec
          AlgorithmParameters params = AlgorithmParameters.getInstance("EC");
          params.init(new ECGenParameterSpec("secp521r1"));
          ECPublicKeySpec spec = new ECPublicKeySpec(w, params.getParameterSpec(ECParameterSpec.class));

          PublicKey publicKey = kf.generatePublic(spec);

          // verify fingerprints generated by ssh-keygen match fingerprints generated by helper function
          test(EC_521_MD5.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("MD5", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using an EC public key and MD5");
          test(EC_521_SHA1.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("SHA-1", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using an EC public key and SHA-1");
          test(EC_521_SHA256.equalsIgnoreCase(SecurityUtil.GenerateSSHKeyFingerprintFromPublicKey("SHA-256", publicKey)), "ssh-keygen fingerprint matches SecurityUtil fingerprint using an EC public key and SHA-256");
        } catch ( Throwable t ) {
          test(false, "Generating SSH key fingerprint for ECPublicKey should not throw an exception");
        }
      `
    }
  ]
});
