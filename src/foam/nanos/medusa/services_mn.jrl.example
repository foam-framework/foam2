p({
  "class": "foam.nanos.boot.NSpec",
  "name": "clusterConfigMonitor",
  "lazy": false,
  "service": {"class":"foam.nanos.medusa.ClusterConfigMonitor"}
})

// NOTE: exists to satisfy common logic between Mediators and Nodes, Nodes do not explicitly use this.
p({
  "class": "foam.nanos.boot.NSpec",
  "name": "internalMedusaEntryDAO",
  "serviceScript": `
    dao = new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.medusa.MedusaEntry.getOwnClassInfo())
      .setNullify(true)
      .setRuler(false)
      .setCluster(false)
      .build();
  `
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"medusaEntryDAO",
  "serve":true,
  "serviceScript":`
    dao = new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.medusa.MedusaEntry.getOwnClassInfo())
      .setInnerDAO(new net.nanopay.security.HashingJDAO(x, "SHA-256", true, false,
        new foam.dao.MDAO(foam.nanos.medusa.MedusaEntry.getOwnClassInfo()), "ledger"))
      .setRuler(false)
      .setCluster(false)
      .setOrder(new foam.mlang.order.Comparator[] {
        new foam.mlang.order.Desc.Builder(x).setArg1(foam.nanos.medusa.MedusaEntry.INDEX).build()
      })
      .setDecorator(new foam.nanos.medusa.ReplayDAO.Builder(x)
      .setDelegate(new foam.nanos.medusa.MedusaEntryUniqueDAO.Builder(x)
      .setDelegate(new foam.nanos.medusa.MedusaEntryAgencyDAO.Builder(x)
      .setDelegate(new foam.nanos.medusa.MedusaEntryIdDAO.Builder(x)
      .setDelegate(new foam.nanos.medusa.MedusaEntryHashingDAO.Builder(x)
      .setDelegate(new foam.nanos.medusa.MedusaEntrySigningDAO.Builder(x)
      .setDelegate(new foam.nanos.medusa.MedusaEntryBroadcastDAO.Builder(x)
      .setDelegate(new foam.dao.NullDAO(x, foam.nanos.medusa.MedusaEntry.getOwnClassInfo()))
      .build())
      .build())
      .build())
      .build())
      .build())
      .build())
      .build())
      .build();
    dao.addPropertyIndex(new foam.core.PropertyInfo[] {
      foam.nanos.medusa.MedusaEntry.INDEX
    });
    dao.addPropertyIndex(new foam.core.PropertyInfo[] {
      foam.nanos.medusa.MedusaEntry.HASH
    });
    return dao;
  `,
  "client":"{\"of\":\"foam.nanos.medusa.MedusaEntry\", \"remoteListenerSupport\": false}"
})
