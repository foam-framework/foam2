p({
  "class": "foam.nanos.boot.NSpec",
  "name": "medusaThreadPool",
  "serviceScript": `
    return new foam.nanos.pool.ThreadPoolAgency.Builder(x)
      .setPrefix("medusa")
      .build();
  `
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "health",
  "lazy": false,
  "authenticate": false,
  "serviceClass": "foam.nanos.medusa.HealthCheckWebAgent"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "localClusterConfigDAO",
  "serviceScript": """
    dao = new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.medusa.ClusterConfig.getOwnClassInfo())
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("clusterConfig")
      .setCluster(false)
      .setRuler(false)
      .setAuthorize(false)
      .setPm(true)
      .setDecorator(new foam.nanos.medusa.ClusterConfigNARegionReplayDAO.Builder(x)
      .setDelegate(new foam.nanos.medusa.ClusterConfigReplayDAO.Builder(x)
      .setDelegate(new foam.nanos.medusa.ClusterConfigStatusDAO.Builder(x)
      .setDelegate(new foam.nanos.medusa.ClusterConfigSupportDAO.Builder(x)
      .setDelegate(new foam.dao.NullDAO(x, foam.nanos.medusa.ClusterConfig.getOwnClassInfo()))
      .build())
      .build())
      .build())
      .build())
      .build();

    dao.addPropertyIndex(new foam.core.PropertyInfo[] {
      foam.nanos.medusa.ClusterConfig.ENABLED,
      foam.nanos.medusa.ClusterConfig.REALM,
      foam.nanos.medusa.ClusterConfig.REGION,
      foam.nanos.medusa.ClusterConfig.STATUS,
      foam.nanos.medusa.ClusterConfig.TYPE,
      foam.nanos.medusa.ClusterConfig.ZONE
    });

    dao.addPropertyIndex(new foam.core.PropertyInfo[] {
      foam.nanos.medusa.ClusterConfig.ENABLED,
      foam.nanos.medusa.ClusterConfig.STATUS,
      foam.nanos.medusa.ClusterConfig.TYPE,
      foam.nanos.medusa.ClusterConfig.ZONE
    });

    dao.addPropertyIndex(new foam.core.PropertyInfo[] {
      foam.nanos.medusa.ClusterConfig.ENABLED,
      foam.nanos.medusa.ClusterConfig.REALM,
    });

    dao.addPropertyIndex(new foam.core.PropertyInfo[] {
      foam.nanos.medusa.ClusterConfig.ENABLED
    });
    dao.addPropertyIndex(new foam.core.PropertyInfo[] {
      foam.nanos.medusa.ClusterConfig.IS_PRIMARY
    });
    dao.addPropertyIndex(new foam.core.PropertyInfo[] {
      foam.nanos.medusa.ClusterConfig.REALM
    });
    dao.addPropertyIndex(new foam.core.PropertyInfo[] {
      foam.nanos.medusa.ClusterConfig.REGION
    });
    dao.addPropertyIndex(new foam.core.PropertyInfo[] {
      foam.nanos.medusa.ClusterConfig.STATUS
    });
    dao.addPropertyIndex(new foam.core.PropertyInfo[] {
      foam.nanos.medusa.ClusterConfig.TYPE
    });
    dao.addPropertyIndex(new foam.core.PropertyInfo[] {
      foam.nanos.medusa.ClusterConfig.ZONE
    });

    // benchmarks
    dao.addPropertyIndex(new foam.core.PropertyInfo[] {
      foam.nanos.medusa.ClusterConfig.ENABLED,
      foam.nanos.medusa.ClusterConfig.REALM,
      foam.nanos.medusa.ClusterConfig.STATUS
    });

    return dao;
   """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "clusterConfigDAO",
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.medusa.ClusterConfig.getOwnClassInfo())
      .setInnerDAO((foam.dao.DAO) x.get("localClusterConfigDAO"))
      .setDecorator(new foam.nanos.medusa.ClusterConfigReplayingInfoDAO.Builder(x).build())
      .setCluster(false)
      .setRuler(false)
      .setEnableInterfaceDecorators(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.medusa.ClusterConfig\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "cluster",
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.medusa.ClusterServerDAO.getOwnClassInfo())
      .setInnerDAO(new foam.nanos.medusa.ClusterServerDAO.Builder(x)
         .setDelegate(new foam.dao.NullDAO(x, foam.nanos.medusa.ClusterServerDAO.getOwnClassInfo()))
         .build())
      .setCluster(false)
      .setNullify(true)
      .setEnableInterfaceDecorators(false)
      .setRuler(false)
      .setAuthorize(false)
      .build();
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"localInternalSessionDAO",
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.session.Session.getOwnClassInfo())
      .setGuid(true)
      .setJournalName("sessionsinternal")
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setAuthorize(false)
      .setCluster(false)
      .setDecorator(new foam.dao.ValidatingDAO(x, new foam.dao.NullDAO(x, foam.nanos.session.Session.getOwnClassInfo())))
      .build();
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"internalSessionDAO",
  "serve":true,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.session.Session.getOwnClassInfo())
      .setInnerDAO(x.get("localInternalSessionDAO"))
      .setEnableInterfaceDecorators(false)
      .build();
  """,
  "client": "{\"of\":\"foam.nanos.session.Session\"}"
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "replayingInfo",
  "description": "Medusa replay info for this instance",
  "serviceScript": """
     return new foam.nanos.medusa.ReplayingInfo();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "clusterTopologyDAO",
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.medusa.ClusterConfig.getOwnClassInfo())
      .setInnerDAO((foam.dao.DAO) x.get("localClusterConfigDAO"))
      .setCluster(false)
      .setRuler(false)
      .setReadOnly(true)
      .setEnableInterfaceDecorators(false)
      .build();
  """,
  "client":"""
  {
    "of":"foam.nanos.medusa.ClusterConfig",
    "cache": false,
    "ttlPurgeTime": 0,
    "ttlSelectPurgeTime": 0
  }
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "daggerService",
  "serve": false,
  "service": {"class":"foam.nanos.medusa.DefaultDaggerService"}
})

// See deployment/mm and mn for type specific setup

// p({
//   "class": "foam.nanos.boot.NSpec",
//   "name": "clusterConfigSupport",
//   "serviceScript":"""
//     return new foam.nanos.medusa.ClusterConfigSupport.Builder(x)
//       .build();
//   """
// })

// p({
//   "class":"foam.nanos.boot.NSpec",
//   "name":"clusterConfigMonitor",
//   "lazy": false,
//   "serviceClass":"foam.nanos.medusa.ClusterConfigMonitor"
// })
