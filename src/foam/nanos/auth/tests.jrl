p({ class: 'foam.nanos.auth.PreventDuplicateEmailDAOTest', id: 'PreventDuplicateEmailDAOTest' })
p({"class":"foam.nanos.test.Test", "id":"Prevent privilege escalation tests", "description":"Tests to ensure that users can't escalate their privileges", "code":"// Prevent privilege escalation tests\n// Tests to ensure that users can't escalate their privileges\n\nimport foam.dao.DAO;\nimport foam.nanos.auth.User;\nimport foam.nanos.auth.Group;\nimport foam.nanos.auth.Permission;\nimport foam.util.Auth;\n\ntry {\n  bareUserDAO = (DAO) x.get(\"bareUserDAO\");\n  userDAO = (DAO) x.get(\"userDAO\");\n  groupDAO = (DAO) x.get(\"groupDAO\");\n\n  // Create a test user we'll eventually assign the group of.\n  bareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"authenticatedgroupdaotestassigneduser@example.com\")).removeAll();\n  assignedUser = new User();\n  assignedUser.setEmail(\"authenticatedgroupdaotestassigneduser@example.com\");\n  assignedUser.setGroup(\"basicUser\");\n  assignedUser = bareUserDAO.put(assignedUser);\n\n  // Create a test group\n  groupDAO.where(foam.mlang.MLang.EQ(Group.ID, \"AuthenticatedGroupDAOTestGroup\")).removeAll();\n  group = new Group();\n  group.setId(\"AuthenticatedGroupDAOTestGroup\");\n  group.setParent(\"basicUser\");\n  updatePermission = new Permission();\n  updatePermission.setId(\"group.update.AuthenticatedGroupDAOTestGroup\");\n  createPermission = new Permission();\n  createPermission.setId(\"group.create\");\n  updateAssignedUserPermission = new Permission();\n  updateAssignedUserPermission.setId(\"user.update.\" + assignedUser.getId());\n  Permission[] permissions = {\n    updatePermission,\n    createPermission,\n    updateAssignedUserPermission\n  };\n  group.setPermissions(permissions);\n  group = groupDAO.put(group);\n\n  // Create a test user to sudo to\n  bareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"AuthenticatedGroupDAOTest@example.com\")).removeAll();\n  user = new User();\n  user.setEmail(\"AuthenticatedGroupDAOTest@example.com\");\n  user.setGroup(\"AuthenticatedGroupDAOTestGroup\");\n  user = bareUserDAO.put(user);\n  userContext = Auth.sudo(x, user);\n\n  // Try to create a new group that has a permission you don't have\n  groupDAO.where(foam.mlang.MLang.EQ(Group.ID, \"MorePowerful\")).removeAll();\n  morePowerful = new Group();\n  morePowerful.setId(\"MorePowerful\");\n  morePowerful.setParent(\"basicUser\");\n  morePowerfulUpdatePermission = new Permission();\n  morePowerfulUpdatePermission.setId(\"group.update.*\");\n  Permission[] morePowerfulPermissions = {\n    morePowerfulUpdatePermission\n  };\n  morePowerful.setPermissions(morePowerfulPermissions);\n  try {\n    morePowerful = groupDAO.put_(userContext, morePowerful);\n    test(false, \"Users cannot create a group containing a permission that isn't implied by one they already have.\");\n    print(\"INFO: No error was thrown.\");\n  } catch (foam.nanos.auth.AuthorizationException e) {\n    test(e.getMessage().equals(\"Permission Denied. You do not have the 'group.update.*' permission.\"), \"Users cannot create a group containing a permission that isn't implied by one they already have.\");\n  }\n\n  // Try to add a permission you don't have to a group by updating\n  try {\n    group = group.fclone();\n    group.setPermissions(morePowerfulPermissions);\n    group = groupDAO.put_(userContext, group);\n    test(false, \"Users cannot update a group containing a permission that isn't implied by one they already have.\");\n    print(\"INFO: No error was thrown.\");\n  } catch (foam.nanos.auth.AuthorizationException e) {\n    test(e.getMessage().equals(\"Permission Denied. You do not have the 'group.update.*' permission.\"), \"Users cannot update a group containing a permission that isn't implied by one they already have.\");\n  }\n\n  // Try to set the parent of a group to \"admin\".\n  try {\n    group = group.fclone();\n    group.setParent(\"admin\");\n    group = groupDAO.put_(userContext, group);\n    test(false, \"Users cannot set the parent of a group to a group containing a permission that isn't implied by one they already have.\");\n    print(\"INFO: No error was thrown.\");\n  } catch (foam.nanos.auth.AuthorizationException e) {\n    test(e.getMessage().equals(\"Permission Denied. You do not have the 'group.update.*' permission.\"), \"Users cannot set the parent of a group to a group containing a permission that isn't implied by one they already have.\");\n  }\n\n  // Create a group with a permission I do have\n  groupDAO.where(foam.mlang.MLang.EQ(Group.ID, \"AuthenticatedGroupDAOTestMyNewGroup\")).removeAll();\n  myNewGroup = new Group();\n  myNewGroup.setId(\"AuthenticatedGroupDAOTestMyNewGroup\");\n  myNewGroup.setParent(\"basicUser\");\n  Permission[] myNewGroupPermissions = {\n    createPermission\n  };\n  myNewGroup.setPermissions(myNewGroupPermissions);\n  myNewGroup = groupDAO.put_(userContext, myNewGroup);\n  test(myNewGroup != null, \"Users can create new groups with permissions they have.\");\n\n  // Assign another user to a group I created.\n  assignedUser = (User) assignedUser.fclone();\n  assignedUser.setGroup(\"AuthenticatedGroupDAOTestMyNewGroup\");\n  try {\n    assignedUser = userDAO.put_(userContext, assignedUser);\n    test(assignedUser.getGroup().equals(\"AuthenticatedGroupDAOTestMyNewGroup\"), \"Can assign users to the new group.\");\n  } catch (Throwable t) {\n    t.printStackTrace();\n    test(false, \"Can assign users to the new group.\");\n    print(\"INFO: \" + t.getMessage());\n  }\n\n  // Try to change my own group.\n  try {\n    user = (User) user.fclone();\n    user.setGroup(\"admin\");\n    user = userDAO.put_(userContext, user);\n    test(false, \"Users cannot set their own group.\");\n    print(\"INFO: No error was thrown.\");\n  } catch (foam.nanos.auth.AuthorizationException e) {\n    test(e.getMessage().equals(\"You cannot change your own group.\"), \"Users cannot set their own group.\");\n  }\n} catch (Throwable e) {\n  e.printStackTrace();\n  test(false, \"An unexpected exception was thrown.\");\n}"})
