p({ class: 'foam.nanos.auth.PreventDuplicateEmailDAOTest', id: 'PreventDuplicateEmailDAOTest' })
p({class:"foam.nanos.test.Test",id:"Prevent privilege escalation tests",code:"import foam.dao.DAO;\u000aimport foam.nanos.auth.User;\u000aimport foam.nanos.auth.Group;\u000aimport foam.nanos.auth.Permission;\u000aimport foam.util.Auth;\u000a\u000atry {\u000abareUserDAO = (DAO) x.get(\"bareUserDAO\");\u000auserDAO = (DAO) x.get(\"userDAO\");\u000agroupDAO = (DAO) x.get(\"groupDAO\");\u000a\u000a// Create a test user we'll eventually assign the group of.\u000abareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"authenticatedgroupdaotestassigneduser@example.com\")).removeAll();\u000aassignedUser = new User();\u000aassignedUser.setId(28299);\u000aassignedUser.setEmail(\"authenticatedgroupdaotestassigneduser@example.com\");\u000aassignedUser.setGroup(\"acme.PPETOriginalGroup\");\u000aassignedUser.setSpid(\"connectedCity\");\u000aassignedUser = bareUserDAO.put(assignedUser);\u000a\u000a// Create a test group that our \"weak\" admin will be a part of.\u000agroupDAO.where(foam.mlang.MLang.EQ(Group.ID, \"AuthenticatedGroupDAOTestGroup\")).removeAll();\u000agroup = new Group();\u000a\u000agroup.setId(\"AuthenticatedGroupDAOTestGroup\");\u000agroup.setParent(\"basicUser\");\u000a\u000aupdateOriginalGroupPermission = new Permission();\u000aupdateOriginalGroupPermission.setId(\"group.update.PPETOriginalGroup\");\u000a\u000aupdatePermission = new Permission();\u000aupdatePermission.setId(\"group.update.AuthenticatedGroupDAOTestGroup\");\u000a\u000acreatePermission = new Permission();\u000acreatePermission.setId(\"group.create\");\u000a\u000acreateGroupPermission = new Permission();\u000acreateGroupPermission.setId(\"group.create.acme.*\");\u000a\u000aupdateGroupPermission = new Permission();\u000aupdateGroupPermission.setId(\"group.update.acme.*\");\u000a\u000a\u000aupdateAssignedUserPermission = new Permission();\u000aupdateAssignedUserPermission.setId(\"user.update.\" + assignedUser.getId());\u000a\u000aPermission[] permissions = {\u000aupdateOriginalGroupPermission,\u000aupdatePermission,\u000acreatePermission,\u000acreateGroupPermission,\u000aupdateAssignedUserPermission,\u000aupdateGroupPermission\u000a};\u000agroup.setPermissions(permissions);\u000agroup = groupDAO.put(group);\u000a// Create a test user to sudo to\u000abareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"AuthenticatedGroupDAOTest@example.com\")).removeAll();\u000auser = new User();\u000auser.setEmail(\"AuthenticatedGroupDAOTest@example.com\");\u000auser.setGroup(\"AuthenticatedGroupDAOTestGroup\");\u000auser = bareUserDAO.put(user);\u000auserContext = Auth.sudo(x, user);\u000a\u000agroupDAO.where(foam.mlang.MLang.EQ(Group.ID, \"MorePowerful\")).removeAll();\u000amorePowerful = new Group();\u000amorePowerful.setId(\"acme.MorePowerful\");\u000amorePowerful.setParent(\"basicUser\");\u000amorePowerfulUpdatePermission = new Permission();\u000amorePowerfulUpdatePermission.setId(\"group.update.*\");\u000aPermission[] morePowerfulPermissions = {\u000amorePowerfulUpdatePermission\u000a};\u000amorePowerful.setPermissions(morePowerfulPermissions);\u000a\u000atry {\u000amorePowerful = groupDAO.put_(userContext, morePowerful);\u000atest(false, \"Users cannot create a group containing a permission that isn't implied by one they already have.\");\u000aprint(\"INFO: No error was thrown.\");\u000a} catch (foam.nanos.auth.AuthorizationException e) {\u000atest(e.getMessage().equals(\"Permission Denied. You do not have the 'group.update.*' permission.\"), \"Users cannot create a group containing a permission that isn't implied by one they already have.\");\u000a}\u000a\u000a\u000a// Try to add a permission you don't have to a group by updating\u000atry {\u000agroup = group.fclone();\u000agroup.setPermissions(morePowerfulPermissions);\u000agroup = groupDAO.put_(userContext, group);\u000atest(false, \"Users cannot update a group containing a permission that isn't implied by one they already have.\");\u000aprint(\"INFO: No error was thrown.\");\u000a} catch (foam.nanos.auth.AuthorizationException e) {\u000atest(e.getMessage().equals(\"Permission Denied. You do not have the 'group.update.*' permission.\"), \"Users cannot update a group containing a permission that isn't implied by one they already have.\");\u000a}\u000a\u000a// Try to set the parent of a group to \"admin\".\u000atry {\u000agroup = group.fclone();\u000agroup.setParent(\"admin\");\u000agroup = groupDAO.put_(userContext, group);\u000atest(false, \"Users cannot set the parent of a group to a group containing a permission that isn't implied by one they already have.\");\u000aprint(\"INFO: No error was thrown.\");\u000a} catch (foam.nanos.auth.AuthorizationException e) {\u000atest(e.getMessage().equals(\"Permission Denied. You do not have the 'group.update.*' permission.\"), \"Users cannot set the parent of a group to a group containing a permission that isn't implied by one they already have.\");\u000a}\u000a\u000a\u000a// Create a group with a permission I do have\u000agroupDAO.where(foam.mlang.MLang.EQ(Group.ID, \"acme.AuthenticatedGroupDAOTestMyNewGroup\")).removeAll();\u000amyNewGroup = new Group();\u000amyNewGroup.setId(\"acme.AuthenticatedGroupDAOTestMyNewGroup\");\u000amyNewGroup.setParent(\"basicUser\");\u000aPermission[] myNewGroupPermissions = {\u000acreatePermission\u000a};\u000amyNewGroup.setPermissions(myNewGroupPermissions);\u000amyNewGroup = groupDAO.put_(userContext, myNewGroup);\u000atest(myNewGroup != null, \"Users can create new groups with permissions they have.\");\u000a\u000a\u000a// Try to change my own group.\u000atry {\u000auser = (User) user.fclone();\u000auser.setGroup(\"admin\");\u000auser = userDAO.put_(userContext, user);\u000atest(false, \"Users cannot set their own group.\");\u000aprint(\"INFO: No error was thrown.\");\u000a} catch (foam.nanos.auth.AuthorizationException e) {\u000atest(e.getMessage().equals(\"You cannot change your own group.\"), \"Users cannot set their own group.\");\u000a}\u000a\u000a\u000a// Assign another user to a group I created.\u000aassignedUser = (User) assignedUser.fclone();\u000aassignedUser.setGroup(\"acme.AuthenticatedGroupDAOTestMyNewGroup\");\u000atry {\u000aassignedUser = bareUserDAO.put_(userContext, assignedUser);\u000atest(assignedUser.getGroup().equals(\"acme.AuthenticatedGroupDAOTestMyNewGroup\"), \"Can assign users to the new group.\");\u000a} catch (Throwable t) {\u000at.printStackTrace();\u000atest(false, \"Can assign users to the new group.\");\u000aprint(\"INFO: \" + t.getMessage());\u000a}\u000a\u000a\u000a} catch (Throwable e) {\u000ae.printStackTrace();\u000atest(false, \"An unexpected exception was thrown.\");\u000a}"})
p({"class":"foam.nanos.auth.DeletedAwareDAOTest","id":"DeletedAwareDAOTest"})
