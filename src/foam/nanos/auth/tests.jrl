p({ class: 'foam.nanos.auth.PreventDuplicateEmailDAOTest', id: 'PreventDuplicateEmailDAOTest' })
p({"class":"foam.nanos.test.Test","id":"Prevent privilege escalation tests","code":"import foam.dao.DAO;\nimport foam.nanos.auth.User;\nimport foam.nanos.auth.Group;\nimport foam.nanos.auth.Permission;\nimport foam.util.Auth;\n\ntry {\nbareUserDAO = (DAO) x.get(\"bareUserDAO\");\nuserDAO = (DAO) x.get(\"userDAO\");\ngroupDAO = (DAO) x.get(\"groupDAO\");\n\n// Create a test user we'll eventually assign the group of.\nbareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"authenticatedgroupdaotestassigneduser@example.com\")).removeAll();\nassignedUser = new User();\nassignedUser.setId(28299);\nassignedUser.setEmail(\"authenticatedgroupdaotestassigneduser@example.com\");\nassignedUser.setGroup(\"acme.PPETOriginalGroup\");\nassignedUser.setSpid(\"connectedCity\");\nassignedUser = bareUserDAO.put(assignedUser);\n\n// Create a test group that our \"weak\" admin will be a part of.\ngroupDAO.where(foam.mlang.MLang.EQ(Group.ID, \"AuthenticatedGroupDAOTestGroup\")).removeAll();\ngroup = new Group();\n\ngroup.setId(\"AuthenticatedGroupDAOTestGroup\");\ngroup.setParent(\"basicUser\");\n\nupdateOriginalGroupPermission = new Permission();\nupdateOriginalGroupPermission.setId(\"group.update.PPETOriginalGroup\");\n\nupdatePermission = new Permission();\nupdatePermission.setId(\"group.update.AuthenticatedGroupDAOTestGroup\");\n\ncreatePermission = new Permission();\ncreatePermission.setId(\"group.create\");\n\ncreateGroupPermission = new Permission();\ncreateGroupPermission.setId(\"group.create.acme.*\");\n\nupdateGroupPermission = new Permission();\nupdateGroupPermission.setId(\"group.update.acme.*\");\n\n\nupdateAssignedUserPermission = new Permission();\nupdateAssignedUserPermission.setId(\"user.update.\" + assignedUser.getId());\n\nPermission[] permissions = {\nupdateOriginalGroupPermission,\nupdatePermission,\ncreatePermission,\ncreateGroupPermission,\nupdateAssignedUserPermission,\nupdateGroupPermission\n};\ngroup.setPermissions(permissions);\ngroup = groupDAO.put(group);\n// Create a test user to sudo to\nbareUserDAO.where(foam.mlang.MLang.EQ(User.EMAIL, \"AuthenticatedGroupDAOTest@example.com\")).removeAll();\nuser = new User();\nuser.setEmail(\"AuthenticatedGroupDAOTest@example.com\");\nuser.setGroup(\"AuthenticatedGroupDAOTestGroup\");\nuser = bareUserDAO.put(user);\nuserContext = Auth.sudo(x, user);\n\ngroupDAO.where(foam.mlang.MLang.EQ(Group.ID, \"MorePowerful\")).removeAll();\nmorePowerful = new Group();\nmorePowerful.setId(\"acme.MorePowerful\");\nmorePowerful.setParent(\"basicUser\");\nmorePowerfulUpdatePermission = new Permission();\nmorePowerfulUpdatePermission.setId(\"group.update.*\");\nPermission[] morePowerfulPermissions = {\nmorePowerfulUpdatePermission\n};\nmorePowerful.setPermissions(morePowerfulPermissions);\n\ntry {\nmorePowerful = groupDAO.put_(userContext, morePowerful);\ntest(false, \"Users cannot create a group containing a permission that isn't implied by one they already have.\");\nprint(\"INFO: No error was thrown.\");\n} catch (foam.nanos.auth.AuthorizationException e) {\ntest(e.getMessage().equals(\"Permission Denied. You do not have the 'group.update.*' permission.\"), \"Users cannot create a group containing a permission that isn't implied by one they already have.\");\n}\n\n\n// Try to add a permission you don't have to a group by updating\ntry {\ngroup = group.fclone();\ngroup.setPermissions(morePowerfulPermissions);\ngroup = groupDAO.put_(userContext, group);\ntest(false, \"Users cannot update a group containing a permission that isn't implied by one they already have.\");\nprint(\"INFO: No error was thrown.\");\n} catch (foam.nanos.auth.AuthorizationException e) {\ntest(e.getMessage().equals(\"Permission Denied. You do not have the 'group.update.*' permission.\"), \"Users cannot update a group containing a permission that isn't implied by one they already have.\");\n}\n\n// Try to set the parent of a group to \"admin\".\ntry {\ngroup = group.fclone();\ngroup.setParent(\"admin\");\ngroup = groupDAO.put_(userContext, group);\ntest(false, \"Users cannot set the parent of a group to a group containing a permission that isn't implied by one they already have.\");\nprint(\"INFO: No error was thrown.\");\n} catch (foam.nanos.auth.AuthorizationException e) {\ntest(e.getMessage().equals(\"Permission Denied. You do not have the 'group.update.*' permission.\"), \"Users cannot set the parent of a group to a group containing a permission that isn't implied by one they already have.\");\n}\n\n\n// Create a group with a permission I do have\ngroupDAO.where(foam.mlang.MLang.EQ(Group.ID, \"acme.AuthenticatedGroupDAOTestMyNewGroup\")).removeAll();\nmyNewGroup = new Group();\nmyNewGroup.setId(\"acme.AuthenticatedGroupDAOTestMyNewGroup\");\nmyNewGroup.setParent(\"basicUser\");\nPermission[] myNewGroupPermissions = {\ncreatePermission\n};\nmyNewGroup.setPermissions(myNewGroupPermissions);\nmyNewGroup = groupDAO.put_(userContext, myNewGroup);\ntest(myNewGroup != null, \"Users can create new groups with permissions they have.\");\n\n\n// Try to change my own group.\ntry {\nuser = (User) user.fclone();\nuser.setGroup(\"admin\");\nuser = userDAO.put_(userContext, user);\ntest(false, \"Users cannot set their own group.\");\nprint(\"INFO: No error was thrown.\");\n} catch (foam.nanos.auth.AuthorizationException e) {\ntest(e.getMessage().equals(\"You cannot change your own group.\"), \"Users cannot set their own group.\");\n}\n\n\n// Assign another user to a group I created.\nassignedUser = (User) assignedUser.fclone();\nassignedUser.setGroup(\"acme.AuthenticatedGroupDAOTestMyNewGroup\");\ntry {\nassignedUser = bareUserDAO.put_(userContext, assignedUser);\ntest(assignedUser.getGroup().equals(\"acme.AuthenticatedGroupDAOTestMyNewGroup\"), \"Can assign users to the new group.\");\n} catch (Throwable t) {\nt.printStackTrace();\ntest(false, \"Can assign users to the new group.\");\nprint(\"INFO: \" + t.getMessage());\n}\n\n\n} catch (Throwable e) {\ne.printStackTrace();\ntest(false, \"An unexpected exception was thrown.\");\n}"})