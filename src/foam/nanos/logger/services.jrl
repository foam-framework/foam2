p({
  "class":
  "foam.nanos.boot.NSpec",
  "name":"localLogMessageDAO",
  "lazy":false,
  "serviceScript":"""
    new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.logger.LogMessage.getOwnClassInfo())
      .setAuthorize(false)
      .setSeqNo(true)
      .setPm(true)
      .setRuler(false)
      .setInnerDAO(new foam.dao.WriteOnlyJDAO(x, new foam.dao.MDAO(foam.nanos.logger.LogMessage.getOwnClassInfo()), foam.nanos.logger.LogMessage.getOwnClassInfo(), "../logs/logs"))
      .setFixedSize(new foam.dao.FixedSizeDAO.Builder(x)
        .setComparator(foam.mlang.MLang.DESC(foam.nanos.logger.LogMessage.CREATED))
        .setSize(5000)
        .build())
      .setIndex(new foam.core.PropertyInfo[] {foam.nanos.logger.LogMessage.CREATED})
      .setOrder(new foam.mlang.order.Comparator[] {foam.mlang.MLang.DESC(foam.nanos.logger.LogMessage.CREATED)})
      .setDecorator(new foam.nanos.logger.StdoutLoggerDAO.Builder(x)
        .setDelegate(new foam.nanos.logger.LogMessageDAO.Builder(x)
          .setDelegate(new foam.nanos.logger.RepeatLogMessageDAO.Builder(x)
            .setDelegate(new foam.nanos.logger.NotificationLogMessageDAO.Builder(x)
              .build())
            .build())
          .build())
        .build())
      .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "logMessageDAO",
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.logger.LogMessage.getOwnClassInfo())
      .setInnerDAO(((foam.dao.DAO) x.get("localLogMessageDAO")))
      .build();
  """,
  "client": """
    {
      "of": "foam.nanos.logger.LogMessage"
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"logLevelFilterLogger",
  "lazy":false,
  "service":{"class":"foam.nanos.logger.LogLevelFilterLogger"}
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"logger",
  "lazy":false,
  "serviceScript":"""
    import foam.nanos.logger.ProxyLogger;
    import foam.nanos.logger.LogLevelFilterLogger;
    import foam.nanos.logger.DAOLogger;
    ProxyLogger logLevelFilterLogger = (ProxyLogger) x.get("logLevelFilterLogger");
    logLevelFilterLogger.setX(x);
    DAOLogger daoLogger = new DAOLogger(x);
    daoLogger.setDelegate((foam.dao.DAO) x.get("localLogMessageDAO"));
    logLevelFilterLogger.setDelegate(daoLogger);
    return logLevelFilterLogger;
  """
})
