p({
  "class":"foam.nanos.boot.NSpec",
  "name":"stdoutLoggerDAO",
  "lazy":false,
  "serviceScript":"""
    return new foam.nanos.logger.StdoutLoggerDAO.Builder(x)
      .setMode(((foam.nanos.app.AppConfig) x.get("appConfig")).getMode())
      .build();
  """
})

p({
  "class":
  "foam.nanos.boot.NSpec",
  "name":"localLogMessageDAO",
  "lazy":false,
  "serviceScript":"""
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.logger.LogMessage.getOwnClassInfo())
      .setAuthorize(false)
      .setSeqNo(true)
      .setRuler(false)
      .setCluster(false)
      .setJournalType(foam.dao.JournalType.SINGLE_JOURNAL)
      .setJournalName("../logs/logs")
      .setWriteOnly(true)
      .setFixedSize(new foam.dao.FixedSizeDAO.Builder(x)
        .setComparator(foam.mlang.MLang.DESC(foam.nanos.logger.LogMessage.CREATED))
        .setSize(100000)
        .build())
      .setIndex(new foam.core.PropertyInfo[] {foam.nanos.logger.LogMessage.CREATED})
      .setDecorator(new foam.nanos.logger.LogMessageDAO.Builder(x)
          .setDelegate(new foam.nanos.logger.RepeatLogMessageDAO.Builder(x)
          .setDelegate((foam.dao.DAO) x.get("stdoutLoggerDAO"))
          .build())
        .build())
      .build();
  """
})

p({
  "class": "foam.nanos.boot.NSpec",
  "name": "logMessageDAO",
  "serve": true,
  "serviceScript": """
    return new foam.dao.EasyDAO.Builder(x)
      .setOf(foam.nanos.logger.LogMessage.getOwnClassInfo())
      .setInnerDAO(((foam.dao.DAO) x.get("localLogMessageDAO")))
      .setOrder(new foam.mlang.order.Comparator[] { new foam.mlang.order.Desc.Builder(x).setArg1(foam.nanos.logger.LogMessage.CREATED).build() })
      .build();
  """,
  "client": """
    {
      "of": "foam.nanos.logger.LogMessage"
    }
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"logLevelFilterLogger",
  "lazy":false,
  "serviceScript":"""
    import foam.log.LogLevel;
    import foam.nanos.app.AppConfig;
    import foam.nanos.app.Mode;
    import foam.nanos.logger.ProxyLogger;
    import foam.nanos.logger.LogLevelFilterLogger;
    ProxyLogger logLevelFilterLogger = new LogLevelFilterLogger();
    logLevelFilterLogger.setX(x);
    AppConfig app = (AppConfig) x.get("appConfig");
    if ( app.getLogLevel() == LogLevel.INFO ) {
      logLevelFilterLogger.setLogDebug(false);
    } else if ( app.getLogLevel() == LogLevel.WARN ) {
      logLevelFilterLogger.setLogDebug(false);
      logLevelFilterLogger.setLogInfo(false);
    } else if ( app.getLogLevel() == LogLevel.ERROR ) {
      logLevelFilterLogger.setLogDebug(false);
      logLevelFilterLogger.setLogInfo(false);
      logLevelFilterLogger.setLogWarn(false);
    }
    return logLevelFilterLogger;
  """
})

p({
  "class":"foam.nanos.boot.NSpec",
  "name":"logger",
  "lazy":false,
  "serviceScript":"""
    import foam.nanos.logger.ProxyLogger;
    import foam.nanos.logger.LogLevelFilterLogger;
    import foam.nanos.logger.DAOLogger;
    DAOLogger daoLogger = new DAOLogger(x);
    daoLogger.setDelegate((foam.dao.DAO) x.get("localLogMessageDAO"));
    ProxyLogger logLevelFilterLogger = (ProxyLogger) x.get("logLevelFilterLogger");
    logLevelFilterLogger.setDelegate(daoLogger);
    return logLevelFilterLogger;
  """
})
