p({"class":"foam.nanos.test.Test","id":"Unauthorized API Request","description":"Test that an unauthorized API request gets an appropriate response.","server":false,"code":"UnauthorizedRequest();\n\n/** Send an unauthorized request to the API */\nasync function UnauthorizedRequest() {\n  var uri = `http://localhost:8080/service/dig?dao=userDAO`;\n  var body = JSON.stringify({\n    email: 'email@example.com',\n    password: 'somePassword123',\n    firstName: 'John',\n    lastName: 'Doe'\n  });\n  var headers = new Headers({\n    'Accept': 'application/json',\n    'Cache-Control': 'no-cache',\n    'Content-Type': 'application/json'\n    // Exclude 'Authorization' header.\n  });\n  var requestInit = {\n    method: 'POST',\n    headers: headers,\n    body: body,\n    credentials: 'omit' // Don't send cookies.\n  }\n  var request = new Request(uri, requestInit);\n  try {\n    var response = await fetch(request);\n    test(response.status === 401, 'Unauthorized requests get a 401 status response.');\n    if ( response.status !== 401 ) print(`Expected status code to be 401 but was ${response.status}.`);\n    test(response.statusText === 'Unauthorized', `Unauthorized requests get an 'Unauthorized' status response.`);\n    if ( response.statusText !== 'Unauthorized' ) print(`Expected status code to be 'Unauthorized' but was '${response.statusText}'.`);\n    try { print(await response.text()); } catch (err) {}\n  } catch (err) {\n    print(err.message);\n    test(false, `Unauthorized requests shouldn't be causing an error here.`);\n  }\n}"})
