// Uncomment after timeout is added to test runner
// p({"class":"foam.dao.RoutingJournalTest","id":"RoutingJournalTest","description":"Tests the RoutingJournal"})
p({ class: 'foam.nanos.test.Test', id: 'CachingDAOTest', enabled: true, description: "Tests for CachingDAO", server: false, code: "const MDAO = foam.dao.MDAO;\nconst TestObj = foam.test.TestObj;\nconst CachingDAO = foam.dao.CachingDAO;\n\nput_HappyPath();\nput_SavesToSource();\nput_PutToSourceUpdatesCachingDAO();\n\nremove_HappyPath();\nremove_RemovesFromSource();\nremove_RemoveFromSourceUpdatesCachingDAO();\n\nremoveAll_HappyPath();\nremoveAll_RemovesFromSource();\nremove_RemoveAllFromSourceUpdatesCachingDAO();\n\nasync function put_HappyPath() {\n  var { cacheDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await dao.put(obj);\n  var result = await cacheDAO.find(`abc`);\n  test(\n      TestObj.isInstance(result) && result.equals(obj),\n      `Calling put on CachingDAO stores the object in it.`\n  );\n}\n\nasync function put_SavesToSource() {\n  var { sourceDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await dao.put(obj);\n  var result = await sourceDAO.find(`abc`);\n  test(\n      TestObj.isInstance(result) && result.equals(obj),\n      `Calling put on CachingDAO stores the object in its source DAO.`\n  );\n}\n\nasync function put_PutToSourceUpdatesCachingDAO() {\n  var { sourceDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await sourceDAO.put(obj);\n  var result = await dao.find(`abc`);\n  test(\n      TestObj.isInstance(result) && result.equals(obj),\n      `Calling put on the source DAO puts that object to the CachingDAO.`\n  );\n}\n\nasync function remove_HappyPath() {\n  var { cacheDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await cacheDAO.put(obj);\n  await dao.remove(obj);\n  var result = await dao.find(`abc`);\n  test(\n      result === null,\n      `Calling remove on a CachingDAO removes that object.`\n  );\n}\n\nasync function remove_RemovesFromSource() {\n  var { sourceDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await sourceDAO.put(obj);\n  await dao.remove(obj);\n  var result = await sourceDAO.find(`abc`);\n  test(\n      result === null,\n      `Calling remove on a CachingDAO removes that object from its source DAO.`\n  );\n}\n\nasync function remove_RemoveFromSourceUpdatesCachingDAO() {\n  var { sourceDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await dao.put(obj);\n  await sourceDAO.remove(obj);\n  var result = await dao.find(`abc`);\n  test(\n      result === null,\n      `Calling remove on the source DAO removes that object from the CachingDAO.`\n  );\n}\n\nasync function removeAll_HappyPath() {\n  var { cacheDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await cacheDAO.put(obj);\n  await dao.removeAll(obj);\n  var result = await dao.find(`abc`);\n  test(\n      result === null,\n      `Calling removeAll on a CachingDAO removes all objects.`\n  );\n}\n\nasync function removeAll_RemovesFromSource() {\n  var { sourceDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await sourceDAO.put(obj);\n  await dao.removeAll();\n  var result = await sourceDAO.find(`abc`);\n  test(\n      result === null,\n      `Calling removeAll on a CachingDAO removes all objects from its source DAO.`\n  );\n}\n\nasync function remove_RemoveAllFromSourceUpdatesCachingDAO() {\n  var { sourceDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await dao.put(obj);\n  await sourceDAO.removeAll();\n  var result = await dao.find(`abc`);\n  test(\n      result === null,\n      `Calling removeAll on the source DAO removes all objects from the CachingDAO.`\n  );\n}\n\n// Utilities\n\nfunction createTestDAOs() {\n  var sourceDAO = MDAO.create({ of: TestObj });\n  var cacheDAO = MDAO.create({ of: TestObj });\n  return {\n    sourceDAO: sourceDAO,\n    cacheDAO: cacheDAO,\n    dao: CachingDAO.create({ src: sourceDAO, cache: cacheDAO })\n  }\n}\n" })
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","description":"SequenceNumberDAO tests"})
p({"class":"foam.dao.EnabledAwareDAOTest","id":"EnabledAwareDAOTest"})

p({"class":"foam.nanos.test.Test","id":"FixedSizeDAOTest","status":2,"code":"of = foam.nanos.auth.User.getOwnClassInfo();\n\ndao = new foam.dao.FixedSizeDAO.Builder(x)\n  .setDelegate(new foam.dao.MDAO(of))\n  .setComparator(foam.mlang.MLang.DESC(of.getAxiomByName(\"lastModified\")))\n  .setSize(10)\n  .build();\n\nlong startTime = new java.util.Date().getTime();\nfor ( int i = 100 ; i <= 200 ; i++ ) {\n    dao.put(new foam.nanos.auth.User.Builder(x)\n      .setId(i)\n      .setFirstName(\"Test \" + i)\n      .setLastModified(new java.util.Date(startTime + i))\n      .build());\n}\n\nprint(dao.select(new foam.mlang.sink.Count()).getValue());\n\nprint(dao.select(foam.mlang.MLang.MIN(of.getAxiomByName(\"firstName\"))));\nprint(dao.select(foam.mlang.MLang.MAX(of.getAxiomByName(\"firstName\"))));","output":""})
p({"class":"foam.nanos.test.Test","id":"FixedSizeDAOTest","failed":1,"lastRun":"2019-09-11T18:32:32.179Z","lastDuration":11,"status":1,"output":"FAILURE: Sourced file: inline evaluation of: ``of = foam.nanos.auth.User.getOwnClassInfo();  dao = new foam.dao.FixedSizeDAO.B . . . '' : Class or variable not found: foam.dao.FixedSizeDAO.Builder\nSourced file: inline evaluation of: ``of = foam.nanos.auth.User.getOwnClassInfo();  dao = new foam.dao.FixedSizeDAO.B . . . '' : Class or variable not found: foam.dao.FixedSizeDAO.Builder : at Line: 3 : in file: inline evaluation of: ``of = foam.nanos.auth.User.getOwnClassInfo();  dao = new foam.dao.FixedSizeDAO.B . . . '' : foam .dao .FixedSizeDAO .Builder \n\n\tat bsh.UtilEvalError.toEvalError(UtilEvalError.java:79)\n\tat bsh.UtilEvalError.toEvalError(UtilEvalError.java:84)\n\tat bsh.BSHAmbiguousName.toObject(BSHAmbiguousName.java:58)\n\tat bsh.BSHAllocationExpression.objectAllocation(BSHAllocationExpression.java:80)\n\tat bsh.BSHAllocationExpression.eval(BSHAllocationExpression.java:56)\n\tat bsh.BSHPrimarySuffix.doSuffix(BSHPrimarySuffix.java:97)\n\tat bsh.BSHPrimaryExpression.eval(BSHPrimaryExpression.java:74)\n\tat bsh.BSHPrimaryExpression.eval(BSHPrimaryExpression.java:41)\n\tat bsh.BSHAssignment.eval(BSHAssignment.java:71)\n\tat bsh.Interpreter.eval(Interpreter.java:659)\n\tat bsh.Interpreter.eval(Interpreter.java:750)\n\tat bsh.Interpreter.eval(Interpreter.java:739)\n\tat foam.nanos.test.Test.runScript(Test.java:394)\n\tat foam.nanos.script.ScriptRunnerDAO$1.execute(ScriptRunnerDAO.java:58)\n\tat foam.nanos.pool.ThreadPoolAgency$ContextAgentRunnable.run(ThreadPoolAgency.java:45)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"})
p({"class":"foam.nanos.test.Test","id":"FixedSizeDAOTest","status":2,"code":"of = foam.nanos.auth.User.getOwnClassInfo();\n\ndao = new foam.dao.FixedSizeDAO.Builder(x)\n  .setDelegate(new foam.dao.MDAO(of))\n  .setComparator(foam.mlang.MLang.DESC(of.getAxiomByName(\"lastModified\")))\n  .setPredicate(foam.mlang.MLang.TRUE)\n  .setSize(10)\n  .build();\n\nlong startTime = new java.util.Date().getTime();\nfor ( int i = 100 ; i <= 200 ; i++ ) {\n    dao.put(new foam.nanos.auth.User.Builder(x)\n      .setId(i)\n      .setFirstName(\"Test \" + i)\n      .setLastModified(new java.util.Date(startTime + i))\n      .build());\n}\n\nprint(dao.select(new foam.mlang.sink.Count()).getValue());\n\nprint(dao.select(foam.mlang.MLang.MIN(of.getAxiomByName(\"firstName\"))));\nprint(dao.select(foam.mlang.MLang.MAX(of.getAxiomByName(\"firstName\"))));","output":""})
p({"class":"foam.nanos.test.Test","id":"FixedSizeDAOTest","lastRun":"2019-09-11T18:32:53.794Z","lastDuration":10,"status":1,"output":"FAILURE: Sourced file: inline evaluation of: ``of = foam.nanos.auth.User.getOwnClassInfo();  dao = new foam.dao.FixedSizeDAO.B . . . '' : Class or variable not found: foam.dao.FixedSizeDAO.Builder\nSourced file: inline evaluation of: ``of = foam.nanos.auth.User.getOwnClassInfo();  dao = new foam.dao.FixedSizeDAO.B . . . '' : Class or variable not found: foam.dao.FixedSizeDAO.Builder : at Line: 3 : in file: inline evaluation of: ``of = foam.nanos.auth.User.getOwnClassInfo();  dao = new foam.dao.FixedSizeDAO.B . . . '' : foam .dao .FixedSizeDAO .Builder \n\n\tat bsh.UtilEvalError.toEvalError(UtilEvalError.java:79)\n\tat bsh.UtilEvalError.toEvalError(UtilEvalError.java:84)\n\tat bsh.BSHAmbiguousName.toObject(BSHAmbiguousName.java:58)\n\tat bsh.BSHAllocationExpression.objectAllocation(BSHAllocationExpression.java:80)\n\tat bsh.BSHAllocationExpression.eval(BSHAllocationExpression.java:56)\n\tat bsh.BSHPrimarySuffix.doSuffix(BSHPrimarySuffix.java:97)\n\tat bsh.BSHPrimaryExpression.eval(BSHPrimaryExpression.java:74)\n\tat bsh.BSHPrimaryExpression.eval(BSHPrimaryExpression.java:41)\n\tat bsh.BSHAssignment.eval(BSHAssignment.java:71)\n\tat bsh.Interpreter.eval(Interpreter.java:659)\n\tat bsh.Interpreter.eval(Interpreter.java:750)\n\tat bsh.Interpreter.eval(Interpreter.java:739)\n\tat foam.nanos.test.Test.runScript(Test.java:394)\n\tat foam.nanos.script.ScriptRunnerDAO$1.execute(ScriptRunnerDAO.java:58)\n\tat foam.nanos.pool.ThreadPoolAgency$ContextAgentRunnable.run(ThreadPoolAgency.java:45)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n"})
p({"class":"foam.nanos.test.Test","id":"FixedSizeDAOTest","status":2,"output":""})
p({"class":"foam.nanos.test.Test","id":"FixedSizeDAOTest","failed":0,"lastRun":"2019-09-11T18:35:15.399Z","lastDuration":138,"status":1,"output":"10\nvalue: Test 191, arg1: foam.nanos.auth.User.firstName\nvalue: Test 200, arg1: foam.nanos.auth.User.firstName\n"})
