p({ class: 'foam.dao.AuthenticatedDAOTest', id: 'AuthenticatedDAOTest' })
p({"class":"foam.dao.RoutingJournalTest","id":"RoutingJournalTest","description":"Tests the RoutingJournal"})
p({ class: 'foam.nanos.test.Test', id: 'CachingDAOTest', enabled: true, description: "Tests for CachingDAO", server: false, code: "const MDAO = foam.dao.MDAO;\nconst TestObj = foam.test.TestObj;\nconst CachingDAO = foam.dao.CachingDAO;\n\nput_HappyPath();\nput_SavesToSource();\nput_PutToSourceUpdatesCachingDAO();\n\nremove_HappyPath();\nremove_RemovesFromSource();\nremove_RemoveFromSourceUpdatesCachingDAO();\n\nremoveAll_HappyPath();\nremoveAll_RemovesFromSource();\nremove_RemoveAllFromSourceUpdatesCachingDAO();\n\nasync function put_HappyPath() {\n  var { cacheDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await dao.put(obj);\n  var result = await cacheDAO.find(`abc`);\n  test(\n      TestObj.isInstance(result) && result.equals(obj),\n      `Calling put on CachingDAO stores the object in it.`\n  );\n}\n\nasync function put_SavesToSource() {\n  var { sourceDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await dao.put(obj);\n  var result = await sourceDAO.find(`abc`);\n  test(\n      TestObj.isInstance(result) && result.equals(obj),\n      `Calling put on CachingDAO stores the object in its source DAO.`\n  );\n}\n\nasync function put_PutToSourceUpdatesCachingDAO() {\n  var { sourceDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await sourceDAO.put(obj);\n  var result = await dao.find(`abc`);\n  test(\n      TestObj.isInstance(result) && result.equals(obj),\n      `Calling put on the source DAO puts that object to the CachingDAO.`\n  );\n}\n\nasync function remove_HappyPath() {\n  var { cacheDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await cacheDAO.put(obj);\n  await dao.remove(obj);\n  var result = await dao.find(`abc`);\n  test(\n      result === null,\n      `Calling remove on a CachingDAO removes that object.`\n  );\n}\n\nasync function remove_RemovesFromSource() {\n  var { sourceDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await sourceDAO.put(obj);\n  await dao.remove(obj);\n  var result = await sourceDAO.find(`abc`);\n  test(\n      result === null,\n      `Calling remove on a CachingDAO removes that object from its source DAO.`\n  );\n}\n\nasync function remove_RemoveFromSourceUpdatesCachingDAO() {\n  var { sourceDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await dao.put(obj);\n  await sourceDAO.remove(obj);\n  var result = await dao.find(`abc`);\n  test(\n      result === null,\n      `Calling remove on the source DAO removes that object from the CachingDAO.`\n  );\n}\n\nasync function removeAll_HappyPath() {\n  var { cacheDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await cacheDAO.put(obj);\n  await dao.removeAll(obj);\n  var result = await dao.find(`abc`);\n  test(\n      result === null,\n      `Calling removeAll on a CachingDAO removes all objects.`\n  );\n}\n\nasync function removeAll_RemovesFromSource() {\n  var { sourceDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await sourceDAO.put(obj);\n  await dao.removeAll();\n  var result = await sourceDAO.find(`abc`);\n  test(\n      result === null,\n      `Calling removeAll on a CachingDAO removes all objects from its source DAO.`\n  );\n}\n\nasync function remove_RemoveAllFromSourceUpdatesCachingDAO() {\n  var { sourceDAO, dao } = createTestDAOs();\n  var obj = TestObj.create({ id: `abc` });\n  await dao.put(obj);\n  await sourceDAO.removeAll();\n  var result = await dao.find(`abc`);\n  test(\n      result === null,\n      `Calling removeAll on the source DAO removes all objects from the CachingDAO.`\n  );\n}\n\n// Utilities\n\nfunction createTestDAOs() {\n  var sourceDAO = MDAO.create({ of: TestObj });\n  var cacheDAO = MDAO.create({ of: TestObj });\n  return {\n    sourceDAO: sourceDAO,\n    cacheDAO: cacheDAO,\n    dao: CachingDAO.create({ src: sourceDAO, cache: cacheDAO })\n  }\n}\n" })
p({"class":"foam.dao.SequenceNumberDAOTest","id":"SequenceNumberDAO test","description":"SequenceNumberDAO tests"})
p({"class":"foam.nanos.auth.UserAuthorizationTest","id":"UserAuthorizationTest"})
p({"class":"foam.dao.EnabledAwareDAOTest","id":"EnabledAwareDAOTest"})
