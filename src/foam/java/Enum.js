// Test with: foam.u2.ControllerMode.model_.javaSource();

foam.CLASS({
  refines: 'foam.core.EnumModel',

  methods: [
  ],

  templates: [
    {
      name: 'javaSource',
      template: `
// Generated by FOAM, do not modify.

package <%= this.package %>;

public enum <%= this.name %> {
  <%
    for ( var i = 0 ; i < this.values.length ; i++ ) {
      var value = this.values[i];
  %>  <%= value.name %> <%
    }
  %>
}
      `
    }
  ]
})

/*
package <%= this.package %>;
<%
var labelForValue = function(value) {
  if (this.androidResource) {
    return this.androidResource + "." + this.name + "_" + value.name;
  } else {
    return value.javaLabel;
  }
}
%>
public enum <%= this.name %> {
<%
  for ( var i = 0 ; i < this.values.length ; i++ ) {
    var value = this.values[i];
    if ( value.javaSource ) { value.javaSource(out); }
    else {
%>  <%= value.name %>(<%= value.index %>, <%= value.javaValue %>, <%= labelForValue(value) %>) <%
    }
    if ( i == this.values.length - 1 ) {%>;<%}
    else {%>,<%}
  }
%>

  private final int index_;
  private final <%= this.javaValueType %> value_;
  private final String label_;
  <%= this.name %>(int index, <%= this.javaValueType %> value, String label) {
    index_ = index;
    label_ = label;
    value_ = value;
  }

  public <%= this.javaValueType %> getValue() { return value_; }
  public int getIndex() { return index_; }
  public String getLabel() { return label_; }

  public static <%= this.name %> forOrdinal(int ordinal) {
    switch (ordinal) {
<% for (var i = 0, value; value = this.values[i]; i++) { %>
      case <%= i %>: return <%= this.name %>.<%= value.name %>;
<% } %>
    }
    return null;
  }

  public static <%= this.name %> forIndex(int index) {
    switch (index) {
<% for (var i = 0, value; value = this.values[i]; i++) { %>
      case <%= value.index %>: return <%= this.name %>.<%= value.name %>;
<% } %>
    }
    return null;
  }

  public static <%= this.name %> forValue(<%= this.javaValueType %> value) {
    for (<%= this.name %> e : <%= this.name %>.values()) {
    <% if (this.javaValueType == 'int' || this.javaValueType == 'long') { %>
      if (value == e.getValue()) {
    <% } else { %>
      if (value.equals(e.getValue())) {
    <% } %>
        return e;
      }
    }
    return null;
  }

  public static String[] labels() {
    return new String[] {
<% for (var i = 0, value; value = this.values[i]; i++) { %>
      <%= labelForValue(value) %>,
<% } %>
    };
  }
}
*/
