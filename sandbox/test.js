/*foam.CLASS({
  package: 'demos.firebase',
  name: 'Person',
  ids: [
    'name'
  ],
  properties: [
    'name',
    'phone'
  ]
});

var dao = com.firebase.FirebaseDAO.create({
  apppath: "https://glaring-torch-184.firebaseio.com/",
  of: demos.firebase.Person,
  secret: '0Zr5o8wSWmje7gyVvAhVocW8AjPNvjXEqfKr6B33'
});

// dao.put(demos.firebase.Person.create({ name: 'adam', phone: '555-555-5555' })).then(function() {
//   return dao.select();
// })

dao.select().then(function(array) {
  array = array.array;
  for ( var i = 0 ; i < array.length ; i++ ) {
    console.log("Object", array[i].toJSON());
  }
}, function(e) {
  console.error("Error event", e);
});

dao.on.put.sub(function(s, _, obj) {
  console.log("On put", obj.id, obj.phone);
});
dao.on.remove.sub(function(s, _, obj) {
  console.log("On remove", obj.id, obj.phone);
});
dao.on.reset.sub(function() {
  console.log("On reset");
});
*/
/*
foam.CLASS({
  name: 'TemplateBenchmark',
  package: 'test',
  requires: [
    'foam.templates.TemplateUtil'
  ],
  properties: [
    {
      name: 'parser',
      factory: function() {
        var g = foam.parse.Grammar.create({
          symbols: function(repeat0, simpleAlt, sym, seq1, seq, repeat, notChars, anyChar, not, optional, literal) {
            return {
              START: sym('markup'),

              markup: repeat0(simpleAlt(
                sym('comment'),
                sym('simple value'),
                sym('raw values tag'),
                sym('code tag'),
                sym('ignored newline'),
                sym('newline'),
                sym('single quote'),
                sym('text')
              )),

              'comment': seq1(1, '<!--', repeat0(not('-->', anyChar())), '-->'),


              'simple value': seq('%%', repeat(notChars(' ()-"\r\n><:;,')), optional('()')),

              'raw values tag': simpleAlt(
                seq('<%=', repeat(not('%>', anyChar())), '%>')
              ),

              'code tag': seq('<%', repeat(not('%>', anyChar())), '%>'),
              'ignored newline': simpleAlt(
                literal('\\\r\\\n'),
                literal('\\\n')
              ),
              newline: simpleAlt(
                literal('\r\n'),
                literal('\n')
              ),
              'single quote': literal("'"),
              text: anyChar()
            };
          }
        });
        var self = this;
        return g;
        g.addActions({
          'markup': function(v) {
            var wasSimple = self.simple;
            var ret = wasSimple ? null : self.out.join('');
            self.out = [];
            self.simple = true;
            return [wasSimple, ret];
          },
          'simple value': function(v) {
            self.push("',\n self.",
                      v[1].join(''),
                      v[2],
                      ",\n'");
          },
          'raw values tag': function (v) {
            self.push("',\n",
                      v[1].join(''),
                      ",\n'");
          },
          'code tag': function (v) {
            self.push("');\n",
                      v[1].join(''),
                      ";out('");
          },
          'single quote': function () {
            self.pushSimple("\\'");
          },
          newline: function() {
            self.pushSimple('\\n');
          },
          text: function(v) {
            self.pushSimple(v);
          }
        });
        return g;
      }
    },
    {
      name: 'out',
      factory: function() { return []; }
    },
    {
      name: 'simple',
      defaultValue: true
    }
  ],
  constants: {
    JAVA_SOURCE: '// Generated by FOAM, do not modify.\n' +
      '// Version <%= this.version %><%\n' +
      '  var className       = this.javaClassName;\n' +
      "'  var parentClassName = 'AbstractFObject';\n" +
      "  var parentModel = '';\n" +
      "  if (this.extends) {\n" +
      "    parentClassName = this.extends;\n" +
      "    parentModel = this.extends + '.MODEL(), ';\n" +
      "  }\n" +
      "  if ( GLOBAL[parentClassName] && GLOBAL[parentClassName].abstract )\n" +
      "    parentClassName = 'Abstract' + parentClassName;\n" +
      "%><% if ( this.package ) { %>\n" +
      "package <%= this.package %>;\n" +
      "<% } %>\n" +
      "import foam.core.*;\n" +
      "import foam.dao.*;\n" +
      "import java.util.Arrays;\n" +
      "import java.util.List;\n" +
      "\n" +
      "public<%= this.abstract ? ' abstract' : '' %> class <%= className %>\n" +
      "    extends <%= parentClassName %> {\n" +
      "<% for ( var key in this.properties ) {\n" +
      "  var prop = this.properties[key];\n" +
      "  if ( prop.labels && prop.labels.indexOf('compiletime') != -1  )\n" +
      "    continue;\n" +
      "  javaSource.propertySource.call(this, out, prop);\n" +
      "}\n" +
      "if (this.relationships && this.relationships.length) {\n" +
      "  for ( var i = 0; i < this.relationships.length; i++) {\n" +
      "    var rel = this.relationships[i];\n" +
      "    javaSource.relationshipSource.call(this, out, rel);\n" +
      "  }\n" +
      "}\n" +
      "\n" +
      "var allProps = this.getRuntimeProperties();\n" +
      "allProps = allProps.filter(function(m) {\n" +
      "  if ( m.labels &&\n" +
      "        ( m.labels.indexOf('java') == -1 ||\n" +
      "          m.labels.indexOf(\"compiletime\") != -1 ) ) {\n" +
      "    return false;\n" +
      "  }\n" +
      "  return true;\n" +
      "});\n" +
      "\n" +
      " %>\n" +
      "final static Model model__ = new AbstractModel(<%= parentModel %>new Property[] {<% for (var i = 0; i < allProps.length; i++) { var prop = allProps[i]; %> <%= constantize(prop.name) %>,<% } %>} , new Relationship[] {<% if (this.relationships && this.relationships.length) { for (var i = 0; i < this.relationships.length; i++) { %> <%= constantize(this.relationships[i].name) %>, <% } } %> }) {\n" +
      "    public String getName() { return \"<%= this.id %>\"; }\n" +
      "    public String getShortName() { return \"<%= this.name %>\"; }\n" +
      "    public String getLabel() { return \"<%= this.label %>\"; }\n" +
      "    public Property getID() { return <%= this.ids.length ? constantize(this.ids[0]) : 'null' %>; }\n" +
      "    public FObject newInstance() { return new <%= className %>(); }\n" +
      "  };\n" +
      "\n" +
      "  public Model model() {\n" +
      "    return model__;\n" +
      "  }\n" +
      "  public static Model MODEL() {\n" +
      "    return model__;\n" +
      "  }\n" +
      "\n" +
      "  public int hashCode() {\n" +
      "    int hash = 1;\n" +
      "<% for (var i = 0; i < allProps.length; i++) { var prop = allProps[i]; %>\n" +
      "    hash = hash * 31 + hash(<%= prop.name %>_);<% } %>\n" +
      "\n" +
      "    return hash;\n" +
      "  }\n" +
      "\n" +
      "  public int compareTo(Object obj) {\n" +
      "    if ( obj == this ) return 0;\n" +
      "    if ( obj == null ) return 1;\n" +
      "\n" +
      "    <%= this.name %> other = (<%= this.name %>) obj;\n" +
      "\n" +
      "    int cmp;\n" +
      "<% for (var i = 0; i < allProps.length; i++) { var prop = allProps[i]; %>\n" +
      "    if ( ( cmp = compare(get<%= prop.name.capitalize() %>(), other.get<%= prop.name.capitalize() %>()) ) != 0 ) return cmp;<% } %>\n" +
      "\n" +
      "    return 0;\n" +
      "  }\n" +
      "\n" +
      "  public StringBuilder append(StringBuilder b) {\n" +
      "    return b<% for (var i = 0; i < allProps.length; i++) { var prop = allProps[i]; %>\n" +
      "        .append(\"<%= prop.name %>=\").append(get<%= prop.name.capitalize() %>())<%= i < allProps.length - 1 ? '.append(\", \")' : '' %><% } %>;\n" +
      "  }\n" +
      "\n" +
      "  public <%= className %> fclone() {\n" +
      "    <%= this.name %> c = new <%= this.name %>();\n" +
      "<% for (var i = 0; i < allProps.length; i++) { var prop = allProps[i]; %>\n" +
      "    c.set<%= prop.name.capitalize() %>(get<%= prop.name.capitalize() %>());<% } %>\n" +
      "    return c;\n" +
      "  }\n" +
      "<%\n" +
      "  function feature(f) {\n" +
      "    f.javaSource$f && f.javaSource$f(out, self);\n" +
      "  }\n" +
      "\n" +
      "  this.methods.forEach(feature);\n" +
      "  this.listeners.forEach(feature);\n" +
      "%>\n" +
      "}\n"
  },
  methods: [
    function benchmark(iterations) {
      var iters = iterations || 500;

      //      var util = foam.templates.TemplateUtil.create();

      //      var test = util.parser.parseString(this.JAVA_SOURCE);

//      var test = this.parser.parseString(this.JAVA_SOURCE);
//      if ( ! test ) {
//        console.log("failed to parse");
//        return;
//      }

//      console.log("result is ", test[0], test[1].length);

      console.time('template-util');
//      console.profile('foam2');
      for ( var i = 0 ; i < iters; i++ ) {
        this.parser.parseString(this.JAVA_SOURCE);
      }
//      console.profileEnd('foam2');
      console.timeEnd('template-util');

    },
    function push() {
      this.simple = false;
      this.pushSimple.apply(this, arguments);
    },

    function pushSimple() {
      this.out.push.apply(this.out, arguments);
    }
      ]
});

test.TemplateBenchmark.create().benchmark(10000);
*/

var worker = new Worker('/sandbox/worker.js');

var registry = foam.box.RegistryBox.create({
  delegate: foam.box.LoggingBox.create({
    name: 'root',
    delegate: foam.box.Box.create()
  })
});

var server = foam.messaging.MessageChannelServer.create({
  delegate: registry
}, registry);

server.connect(worker).then(function(workerBox) {
  // Client
  var proxy = foam.CLASS({
    name: 'TestObjectProxy',
    properties: [
      {
        class: 'Stub',
        of: 'demos.TestObject',
        name: 'delegate'
      }
    ]
  }).create({
    box: foam.box.SubBox.create({
      name: 'testObject',
      delegate: workerBox,
    })
  }, server);

  window.proxy = proxy;

  proxy.greetUser("Adam").then(function(s) { console.log(s); });

  var dao = foam.dao.ClientDAO.create({
    of: demos.Person,
    box: foam.box.SubBox.create({
      name: 'personDao',
      delegate: workerBox
    })
  }, server);

  window.dao = dao;

  dao.select(foam.mlang.sink.Count.create()).then(function(c) {
    console.log("There are ", c.value, " people in the dao");
  });

  dao.select().then(function(a) {
    console.log("They are");
    a = a.array;
    for ( var i = 0 ; i < a.length ; i++ ) {
      var p = a[i];
      console.log(p.name, ' - ', p.phone);
    }
  });

  dao.where(foam.mlang.predicate.Eq.create({
    arg1: demos.Person.NAME,
    arg2: 'adam'
  }))
    .select()
    .then(function(a) {
      console.log("People named adam");
      a = a.array;
      for ( var i = 0 ; i < a.length ; i++ ) {
        console.log(a[i].name, a[i].phone);
      }
    });
});
